{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","common.speech/Exports.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","common/Error.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","common/Guid.ts","sdk/Contracts.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","sdk/Audio/AudioStreamFormat.ts","common.speech/HeaderNames.ts","common.speech/RecognitionEvents.ts","common.speech/IAuthentication.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/process/browser.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","common/PlatformEvent.ts","sdk/Audio/AudioOutputStream.ts","sdk/SpeechSynthesisEventArgs.ts","sdk/SpeechSynthesisResult.ts","sdk/SpeechSynthesisWordBoundaryEventArgs.ts","sdk/SpeechSynthesisBookmarkEventArgs.ts","sdk/SpeechSynthesisVisemeEventArgs.ts","common.speech/SynthesisAdapterBase.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/lib/rng-browser.js","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/lib/bytesToUuid.js","common.speech/RecognizerConfig.ts","../node_modules/buffer/index.js","sdk/Audio/AudioOutputFormat.ts","common.speech/SpeechConnectionMessage.Internal.ts","common.speech/SynthesisContext.ts","common.speech/AgentConfig.ts","common.speech/ServiceMessages/SynthesisAudioMetadata.ts","common.speech/DynamicGrammarBuilder.ts","common.speech/SpeechContext.ts","common.speech/ServiceMessages/SpeechDetected.ts","common.speech/CognitiveSubscriptionKeyAuthentication.ts","common.speech/CognitiveTokenAuthentication.ts","common.speech/WebsocketMessageFormatter.ts","common.speech/ServiceMessages/SpeechHypothesis.ts","common.speech/ServiceMessages/SimpleSpeechPhrase.ts","common.speech/ServiceMessages/Enums.ts","common.speech/EnumTranslation.ts","common.speech/ServiceMessages/DetailedSpeechPhrase.ts","common/ConnectionOpenResponse.ts","common.browser/WebsocketMessageAdapter.ts","common.browser/WebsocketConnection.ts","common.browser/ProxyInfo.ts","common.speech/QueryParameterNames.ts","common.speech/ConnectionFactoryBase.ts","common.speech/SpeechConnectionFactory.ts","sdk/SpeechRecognitionResult.ts","sdk/RecognitionResult.ts","sdk/SpeechRecognitionEventArgs.ts","sdk/SpeechRecognitionCanceledEventArgs.ts","sdk/CancellationEventArgsBase.ts","common.speech/SpeechServiceRecognizer.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","common.browser/ReplayableAudioNode.ts","common/Timeout.ts","common.speech/ServiceRecognizerBase.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/superPropBase.js","common.speech/SynthesisEvents.ts","common.speech/SynthesisTurn.ts","common.speech/ServiceTelemetryListener.Internal.ts","common.speech/RequestSession.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/nonIterableRest.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/path-browserify/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/nonIterableSpread.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized.js","common/Promise.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/index.js","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/v1.js","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/v4.js","common/EventSource.ts","sdk/Audio/AudioInputStream.ts","../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/isarray/index.js","sdk/SpeechSynthesisOutputFormat.ts","common/ConnectionMessage.ts","common.browser/CertChecks.ts","../node_modules/url-parse/index.js","../node_modules/requires-port/index.js","../node_modules/querystringify/index.js","common/OCSPEvents.ts","common/Queue.ts","common/List.ts","sdk/Recognizer.ts","common/AudioSourceEvents.ts","common/ChunkedArrayBufferStream.ts","common/Stream.ts","common/Events.ts","sdk/PropertyId.ts","sdk/CancellationReason.ts","sdk/CancellationErrorCodes.ts","sdk/ResultReason.ts","sdk/PropertyCollection.ts","common/ConnectionEvents.ts","common/IConnection.ts","common/BackgroundError.ts","sdk/SessionEventArgs.ts","sdk/RecognitionEventArgs.ts","sdk/OutputFormat.ts","sdk/ServicePropertyChannel.ts","sdk/SpeechRecognizer.ts","common/RawWebsocketMessage.ts","common/RiffPcmEncoder.ts","common.browser/PCMRecorder.ts","common.browser/MicAudioSource.ts","common.browser/FileAudioSource.ts","sdk/Audio/PullAudioInputStreamCallback.ts","sdk/Audio/SpeakerAudioDestination.ts","sdk/Audio/PushAudioOutputStreamCallback.ts","sdk/Audio/AudioFileWriter.ts","sdk/Audio/AudioConfig.ts","sdk/ProfanityOption.ts","sdk/SpeechConfig.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","module","exports","_inherits","subClass","superClass","create","constructor","value","_createSuper","Derived","hasNativeReflectConstruct","result","Super","NewTarget","this","Reflect","construct","arguments","apply","OutputFormatPropertyName","CancellationErrorCodePropertyName","ServicePropertiesPropertyName","ForceDictationPropertyName","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","F","s","n","done","e","_e","f","err","normalCompletion","didErr","step","next","_e2","Parent","args","Class","isNativeReflectConstruct","a","push","Function","bind","setPrototypeOf","_cache","Map","undefined","fn","toString","call","indexOf","has","get","set","Wrapper","getPrototypeOf","argumentName","name","message","Error","error","objectName","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","_objectSpread2","source","forEach","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","Promise","then","_asyncToGenerator","self","createNoDashGuid","replace","RegExp","toUpperCase","Contracts","param","throwIfNullOrUndefined","trim","isDisposed","array","item","throwIfNullOrWhitespace","unsupportedIterableToArray","_getPrototypeOf","__proto__","AudioStreamFormat","AudioStreamFormatImpl","getDefaultInputFormat","samplesPerSecond","bitsPerSample","channels","samplesPerSec","setString","view","offset","str","setUint8","charCodeAt","formatTag","avgBytesPerSec","blockAlign","Math","max","privHeader","ArrayBuffer","DataView","setUint32","setUint16","sampleRate","AudioContext","window","webkitAudioContext","navigator","mediaDevices","getSupportedConstraints","HeaderNames","AuthKey","ConnectionId","ContentType","CustomCommandsAppId","Path","RequestId","RequestStreamId","RequestTimestamp","RecognitionCompletionStatus","SpeechRecognitionEvent","eventName","requestId","sessionId","eventType","Info","privRequestId","privSessionId","RecognitionTriggeredEvent","audioSourceId","audioNodeId","privAudioSourceId","privAudioNodeId","ListeningStartedEvent","ConnectingToServiceEvent","authFetchEventid","privAuthFetchEventid","RecognitionStartedEvent","authFetchEventId","privAuthFetchEventId","AuthInfo","headerName","token","privHeaderName","privToken","arrayLikeToArray","minLen","slice","from","test","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","noop","nextTick","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","_defineProperty","obj","_setPrototypeOf","p","EventType","PlatformEvent","privName","privEventId","privEventTime","Date","toISOString","privEventType","privMetadata","AudioOutputStream","PullAudioOutputStream","PullAudioOutputStreamImpl","privId","privStream","privFormat","format","getDefaultOutputFormat","isClosed","dataBuffer","intView","Int8Array","totalBytes","privLastChunkView","byteLength","isReadEnded","read","chunk","isEnd","tmpBuffer","buffer","readEnded","writeStreamChunk","timeReceived","now","close","PushAudioOutputStream","callback","PushAudioOutputStreamImpl","privCallback","write","privResult","resultId","reason","audioData","errorDetails","properties","privResultId","privReason","privAudioData","privErrorDetails","privProperties","audioOffset","text","wordLength","textOffset","privAudioOffset","privText","privWordLength","privTextOffset","visemeId","animation","privVisemeId","privAnimation","authentication","connectionFactory","synthesizerConfig","speechSynthesizer","audioDestination","speakOverride","receiveMessageOverride","connectImplOverride","configConnectionOverride","sendSynthesisContext","connection","synthesisContextJson","synthesisContext","toJSON","send","Text","privSynthesisTurn","sendSpeechServiceConfig","SpeechServiceConfigJson","sendSsmlMessage","ssml","privAuthentication","privConnectionFactory","privSynthesizerConfig","privIsDisposed","privSpeechSynthesizer","privSessionAudioDestination","SynthesisTurn","privConnectionEvents","EventSource","privServiceEvents","privSynthesisContext","SynthesisContext","privAgentConfig","AgentConfig","connectionEvents","attach","connectionEvent","connectionClosedEvent","statusCode","cancelSynthesisLocal","CancellationReason","BadRequestParameters","ConnectionFailure","privActivityTemplate","messagePayload","privAudioOutputFormat","audioOutputFormat","privConnectionConfigurationPromise","dispose","connectImpl","path","payload","type","Binary","contentType","fetchConnection","isSSML","successCallback","errorCallBack","buildSsml","privSuccessCallback","privErrorCallback","startNewSynthesis","synthesisStartEventArgs","ResultReason","SynthesizingAudioStarted","synthesisStarted","receiveMessage","cancellationReason","errorCode","PropertyCollection","setProperty","Canceled","SynthesisCanceled","cancelEvent","isSynthesizing","onStopSynthesizing","cancelSynthesis","connectionMessage","privServiceHasSentMessage","fromConnectionMessage","toLowerCase","onServiceTurnStartResponse","onServiceResponseMessage","textBody","streamId","binaryBody","onAudioChunkReceived","synthesizing","audioWithHeader","SynthesisAdapterBase","addHeader","ev","SynthesizingAudio","metadataList","SynthesisAudioMetadata","fromJSON","Metadata","metadata","Type","WordBoundary","Bookmark","Viseme","onWordBoundaryEvent","Data","wordBoundaryEventArgs","Offset","Length","currentTextOffset","wordBoundary","bookmarkEventArgs","bookmarkReached","onVisemeMetadataReceived","IsLastAnimation","visemeEventArgs","VisemeId","getAndClearVisemeAnimation","visemeReceived","onServiceTurnEndResponse","getAllReceivedAudioWithHeader","audioBuffer","SynthesizingAudioCompleted","synthesisCompleted","processTypeSpecificMessages","serviceEvents","onEvent","isUnAuthorized","privConnectionPromise","state","Disconnected","privConnectionId","onPreConnectionStart","authPromise","fetchOnExpiry","fetch","onAuthCompleted","events","event","open","response","onConnectionEstablishCompleted","parameters","getProperty","PropertyId","SpeechServiceConnection_Endpoint","catch","configureConnection","SpeechServiceConfig","serialize","audio","hasHeader","updateHeader","tmp","Uint8Array","header","telemetryDataEnabled","arrayWithHoles","iterableToArrayLimit","nonIterableRest","arr","arr2","_isNativeReflectConstruct","sham","Proxy","getRandomValues","crypto","msCrypto","rnds8","rnds","r","random","byteToHex","substr","buf","bth","join","RecognitionMode","SpeechResultFormat","connectivity","RecognizerConfig","speechServiceConfig","privRecognitionMode","Interactive","privSpeechServiceConfig","Context","privParameters","privRecognitionActivityTimeout","Recognition","SpeechServiceConnection_AutoDetectSourceLanguages","context","JSON","stringify","replacement","k","hasOwnProperty","charAt","substring","recognition","os","system","System","build","lang","OS","platform","base64","require","ieee754","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","encodingOrOffset","allocUnsafe","byteOffset","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","fromString","isBuffer","checked","copy","val","data","fromObject","assertSize","size","isView","loweredCase","utf8ToBytes","base64ToBytes","slowToString","start","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","m","bidirectionalIndexOf","isNaN","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","String","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","parseInt","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","c","hi","lo","utf16leToBytes","fromByteArray","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","global","foo","subarray","typedArraySupport","poolSize","_augment","species","fill","allocUnsafeSlow","_isBuffer","compare","x","y","list","pos","swap16","swap32","swap64","equals","inspect","match","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","stringtrim","base64clean","src","dst","AudioFormatTag","AudioOutputFormatImpl","audioFormatString","requestAudioFormatString","priAudioFormatString","priRequestAudioFormatString","priHasHeader","audioLength","speechSynthesisOutputFormat","fromSpeechSynthesisOutputFormatString","SpeechSynthesisOutputFormatToString","speechSynthesisOutputFormatString","PCM","Siren","MP3","SILKSkype","MuLaw","OGG_OPUS","WEBM_OPUS","Raw8Khz8BitMonoMULaw","Riff16Khz16KbpsMonoSiren","Audio16Khz16KbpsMonoSiren","Audio16Khz32KBitRateMonoMp3","Audio16Khz128KBitRateMonoMp3","Audio16Khz64KBitRateMonoMp3","Audio24Khz48KBitRateMonoMp3","Audio24Khz96KBitRateMonoMp3","Audio24Khz160KBitRateMonoMp3","Raw16Khz16BitMonoTrueSilk","Riff16Khz16BitMonoPcm","Riff8Khz16BitMonoPcm","Riff24Khz16BitMonoPcm","Riff8Khz8BitMonoMULaw","Raw16Khz16BitMonoPcm","Raw24Khz16BitMonoPcm","Raw8Khz16BitMonoPcm","Ogg16Khz16BitMonoOpus","Ogg24Khz16BitMonoOpus","Raw48Khz16BitMonoPcm","Riff48Khz16BitMonoPcm","Audio48Khz96KBitRateMonoMp3","Audio48Khz192KBitRateMonoMp3","Ogg48Khz16BitMonoOpus","Webm16Khz16BitMonoOpus","Webm24Khz16BitMonoOpus","SpeechConnectionMessage","messageType","body","additionalHeaders","id","headers","privPath","privContentType","privStreamId","privAdditionalHeaders","privContext","sectionName","synthesisSection","buildSynthesisContext","setSection","metadataOptions","bookmarkEnabled","sentenceBoundaryEnabled","visemeEnabled","wordBoundaryEnabled","outputFormat","language","autoDetection","autoDetectSourceLanguage","iPrivConfig","MetadataType","json","privSynthesisAudioMetadata","parse","DynamicGrammarBuilder","phrase","privPhrases","grammar","privGrammars","retObj","ReferenceGrammars","retPhrases","index","Groups","Items","SpeechContext","dynamicGrammar","privDynamicGrammar","params","phraseDetection","enrichment","pronunciationAssessment","phraseOutput","detailed","options","dgi","generateGrammarObject","SpeechDetected","privSpeechStartDetected","CognitiveSubscriptionKeyAuthentication","subscriptionKey","privAuthInfo","AuthHeader","CognitiveTokenAuthentication","fetchCallback","fetchOnExpiryCallback","privFetchCallback","privFetchOnExpiryCallback","WebsocketMessageFormatter","toConnectionMessage","deferral","textMessage","textContent","headerBodySplit","split","parseHeaders","binaryMessage","binaryContent","dataView","headerLength","getInt16","headersString","getInt8","promise","makeHeaders","content","headerBuffer","stringToArrayBuffer","headerInt8Array","payloadInt8Array","bodyInt8Array","headerMatches","separatorIndex","headerValue","SpeechHypothesis","privSpeechHypothesis","Duration","PrimaryLanguage","Language","Confidence","SpeakerId","SimpleSpeechPhrase","privSimpleSpeechPhrase","RecognitionStatus","DisplayText","SynthesisStatus","EnumTranslation","recognitionStatus","Success","RecognizedSpeech","NoMatch","InitialSilenceTimeout","BabbleTimeout","EndOfDictation","EndOfStream","NoError","ServiceError","TooManyRequests","DetailedSpeechPhrase","privDetailedSpeechPhrase","NBest","privStatusCode","uri","connectionId","messageFormatter","proxyInfo","enableCompression","privConnectionState","privConnectionEstablishDeferral","privCertificateValidatedDeferral","Connecting","WebSocket","WebsocketMessageAdapter","forceNpmWebSocket","privHeaders","perMessageDeflate","privEnableCompression","checkAgent","agent","GetAgent","privWebsocketClient","privUri","binaryType","privReceivingMessageQueue","Queue","privDisconnectDeferral","privSendMessageQueue","processSendQueue","Events","onopen","Connected","onerror","privLastErrorReceived","onclose","onClose","onmessage","networkReceivedTime","deferred","enqueueFromPromise","rawMessage","RawWebsocketMessage","privMessageFormatter","messageSendStatusDeferral","messageSendDeferral","Message","sendStatusDeferral","dequeue","sendRawMessage","sendItem","isWebsocketOpen","stack","None","closeReason","drainAndDispose","pendingReceiveItem","pendingSendItem","itemToSend","readyState","OPEN","queryParameters","privConnectionMessageAdapter","queryParams","paramName","encodeURIComponent","proxyHostName","proxyPort","proxyUserName","proxyPassword","privProxyHostName","privProxyPort","privProxyUserName","privProxyPassword","ProxyInfo","SpeechServiceConnection_ProxyHostName","SpeechServiceConnection_ProxyPort","SpeechServiceConnection_ProxyUserName","SpeechServiceConnection_ProxyPassword","config","fromParameters","BotId","CustomSpeechDeploymentId","CustomVoiceDeploymentId","EnableAudioLogging","EnableLanguageId","EnableWordLevelTimestamps","EndSilenceTimeoutMs","Format","InitialSilenceTimeoutMs","Profanity","RequestBotStatusMessages","StableIntermediateThreshold","StableTranslation","TestHooks","endpoint","setUrlParameter","SpeechServiceConnection_EnableAudioLogging","SpeechServiceResponse_RequestWordLevelTimestamps","SpeechServiceResponse_ProfanityOption","SpeechServiceConnection_InitialSilenceTimeoutMs","SpeechServiceConnection_EndSilenceTimeoutMs","SpeechServiceResponse_StablePartialResultThreshold","serviceProperties","num","propId","parameterName","search","toLocaleLowerCase","interactiveRelativeUri","conversationRelativeUri","dictationRelativeUri","authInfo","region","SpeechServiceConnection_Region","hostSuffix","startsWith","host","SpeechServiceConnection_Host","endpointId","SpeechServiceConnection_EndpointId","SpeechServiceConnection_RecoLanguage","OutputFormat","Simple","autoDetectSourceLanguages","setCommonUrlParams","recognitionMode","Conversation","Dictation","SpeechServiceConnection_Url","fromRecognizerConfig","duration","languageDetectionConfidence","speakerId","privSpeakerId","privDuration","privOffset","privLanguage","privLanguageDetectionConfidence","privJson","RecognitionEventArgs","privErrorCode","audioSource","recognizerConfig","speechRecognizer","privSpeechRecognizer","sourceLanguages","privSpeechContext","languages","onSuccess","action","onUnknown","interimResults","resultType","phraseResults","resultProps","SpeechServiceResponse_JsonResult","processed","hypothesis","privRequestSession","currentTurnAudioOffset","RecognizingSpeech","LanguageDetectionConfidence","onHypothesis","recognizing","simple","resultReason","implTranslateRecognitionResult","onPhraseRecognized","cancelReason","implTranslateCancelResult","cancelRecognitionLocal","implTranslateCancelErrorCode","isSpeechEnded","privRecognizerConfig","Display","recognized","canceled","ServiceRecognizerBase","_typeof","_possibleConstructorReturn","ReferenceError","bytesPerSecond","privBuffers","privReplayOffset","privLastShrinkOffset","privBufferStartOffset","privBufferSerial","privBufferedBytes","privReplay","privLastChunkAcquiredTime","privAudioNode","privBytesPerSecond","offsetToSeek","bytesToSeek","round","retVal","detach","startOffset","endOffset","serial","workerTimers","timerId","timers","func","delay","load","url","scheduledTimeoutFunctions","unhandledRequests","worker","Worker","addEventListener","isCallNotification","idOrFunc","unhandledTimerId","delete","isClearResponse","postMessage","method","performance","loadWorkerTimers","blob","Blob","URL","createObjectURL","revokeObjectURL","recognizer","privSetTimeout","privIsLiveAudio","recognizeOverride","disconnectOverride","sendSpeechContext","speechContextJson","speechContext","sendPrePayloadJSONOverride","postConnectImplOverride","requestSession","privMustReportEndOfStream","privAudioSource","privRecognizer","RequestSession","ConversationTranslator_Token","auth","recoMode","startNewRecognition","listenForServiceTelemetry","conPromise","audioStreamNode","deviceInfo","Microphones","audioNode","onAudioSourceAttachCompleted","onStopRecognizing","sessionStartEventArgs","SessionEventArgs","sessionStarted","sendAudio","RuntimeError","isRecognizing","turnOff","sendFinalAudio","turnCompletionPromise","cb","telemetryData","getTelemetry","cancelRecognition","speechStartDetected","speechStartEventArgs","speechStopDetected","isContinuousRecognition","onServiceRecognized","speechStopEventArgs","speechEndDetected","sendTelemetryData","sessionStopEventArgs","sessionStopped","sendPrePayloadJSON","sendWaveHeader","Speech_SessionId","audioFormat","nextSendTime","fastLaneSizeMs","maxSendUnthrottledBytes","startRecogNumber","recogNumber","readAndUploadCycle","audioStreamChunk","sendDelay","onAudioSent","bytesSent","onSpeechEnded","delayMs","readView","padStart","console","property","receiver","base","desc","sessionAudioDestinationId","turnAudioDestinationId","privSessionAudioDestinationId","privTurnAudioDestinationId","privIsSynthesizing","privIsSynthesisEnded","privBytesReceived","privInTurn","privNextSearchTextIndex","isError","onComplete","responseJson","privTurnDeferral","privAudioOutputStream","privTurnAudioDestination","privReceivedAudio","readAllAudioFromStream","privReceivedAudioWithHeader","getAllReceivedAudio","rawText","privRawText","privIsSSML","privPartialVisemeAnimation","updateTextOffset","AnimationChunk","bytesReceived","privListeningTriggerMetric","privMicMetric","privConnectionEstablishMetric","End","eventTime","Name","Start","privMicStartTime","privConnectionStartTime","Id","getConnectionError","privReceivedMessages","metrics","privPhraseLatencies","PhraseLatencyMs","privHypothesisLatencies","FirstHypothesisLatencyMs","telemetry","Metrics","ReceivedMessages","audioReceivedTime","privDetachables","privIsAudioNodeDetached","privIsRecognizing","privIsSpeechEnded","privTurnStartAudioOffset","privLastRecoOffset","privHypothesisReceived","privBytesSent","privRecogNumber","privServiceTelemetryListener","hasTelemetry","eventSource","attachListener","replay","continuousRecognition","hypothesisReceived","findTimeAtOffset","phraseReceived","shrinkBuffers","detachable","detachAudioNode","_n","_d","_s","_i","runtime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","_invoke","GenStateSuspendedStart","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","GenStateSuspendedYield","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","displayName","isGeneratorFunction","genFun","ctor","mark","awrap","async","iter","reverse","pop","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","xs","resolvedPath","resolvedAbsolute","normalize","isAbsolute","trailingSlash","paths","relative","to","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dirname","hasRoot","matchedSlash","basename","extname","startDot","startPart","preDotState","arrayWithoutHoles","iterableToArray","nonIterableSpread","possibleConstructorReturn","assertThisInitialized","PromiseState","Deferred","privResolve","privReject","privPromise","marshalPromiseToCallbacks","typedError","v1","v4","uuid","_nodeId","_clockseq","rng","bytesToUuid","_lastMSecs","_lastNSecs","node","clockseq","seedBytes","msecs","getTime","nsecs","dt","tl","tmh","ii","privEventListeners","eventId","onEventCallback","listener","AudioInputStream","PushAudioInputStream","PullAudioInputStream","PushAudioInputStreamImpl","privEvents","bufferData","readCycle","XMLHttpRequest","toBuffer","turnOn","stream","bitspersample","channelcount","Unknown","manufacturer","model","samplerate","Stream","arrayBuffer","PullAudioInputStreamImpl","privIsClosed","privBufferSize","transmitBuff","readBuff","pulledBytes","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","NaN","rt","abs","log","LN2","SpeechSynthesisOutputFormat","MessageType","ConnectionMessage","privBody","privMessageType","privSize","CertCheckAgent","privProxyInfo","privDiskCache","supportBuffer","location","SPEECH_OCSP_CACHE_ROOT","disableStapling","Agent","CreateConnection","HostName","Port","request","socketPromise","enableOCSP","NODE_TLS_REJECT_UNAUTHORIZED","SPEECH_CONDUCT_OCSP_CHECK","secureEndpoint","requestOCSP","forceDisableOCSPStapling","servername","baseAgent","GetProxyAgent","socket","OCSPCheck","privMemCache","httpProxyOptions","port","UserName","Password","resolved","cork","tlsSocket","stapling","destroy","peer","getPeerCertificate","GetIssuer","issuer","ocspRequest","generate","raw","sig","GetResponseFromCache","cacheEntry","VerifyOCSPResponse","uncork","issuerCertificate","fetchIssuer","signature","cachedResponse","diskCacheResponse","isCached","StoreMemoryCacheEntry","cachedOcspResponse","parseResponse","tbsData","tbsResponseData","responses","cachedStartTime","thisUpdate","cachedNextTime","nextUpdate","testTimeOffset","minUpdate","UpdateCache","cacheValue","ocspResponse","certID","GetOCSPResponse","StoreCacheEntry","req","rawResponse","StoreDiskCacheEntry","getAuthorityInfo","cert","parsedUri","pathname","getResponse","required","qs","slashes","protocolre","left","trimLeft","rules","address","ignore","hash","query","lolcation","finaldestination","protocol","Url","unescape","href","extractProtocol","exec","rest","parser","extracted","instruction","instructions","hostname","username","password","origin","part","char","ins","decode","input","decodeURIComponent","encode","prefix","pairs","undef","OCSPEvent","privSignature","OCSPMemoryCacheHitEvent","Debug","OCSPCacheMissEvent","OCSPDiskCacheHitEvent","OCSPCacheUpdateNeededEvent","OCSPMemoryCacheStoreEvent","OCSPDiskCacheStoreEvent","OCSPCacheUpdatehCompleteEvent","OCSPStapleReceivedEvent","OCSPCacheEntryExpiredEvent","serialNumber","expireTime","privExpireTime","OCSPCacheEntryNeedsRefreshEvent","startTime","privStartTime","OCSPCacheHitEvent","privExpireTimeString","toLocaleDateString","privStartTimeString","toLocaleTimeString","OCSPVerificationFailedEvent","privError","OCSPCacheFetchErrorEvent","OCSPResponseRetrievedEvent","OCSPCacheUpdateErrorEvent","SubscriberType","privSubscriptionIdCounter","privAddSubscriptions","privRemoveSubscriptions","privDisposedSubscriptions","privDisposeReason","itemIndex","throwIfDisposed","privList","first","add","insertAt","triggerSubscriptions","removeFirst","removeAt","removeLast","remove","count","removedElements","clear","onAdded","addedCallback","subscriptionId","onRemoved","removedCallback","onDisposed","disposedCallback","seperator","toArray","cloneCopy","any","where","all","select","selectList","List","filteredList","orderBy","compareFn","orderedArray","sort","orderByDesc","clone","concatArray","subscriptions","privPromiseStore","privIsDrainInProgress","privIsDisposing","enqueue","throwIfDispose","deferredSubscriber","privSubscribers","Dequeue","drain","peek","Peek","subs","lists","subscriber","dequeuedItem","pendingItemProcessor","promiseArray","wrapper","finally","Recognizer","audioConfig","fromDefaultMicrophoneInput","privDisposed","implCommonRecognizerSetup","errorCb","privReco","disposing","osPlatform","osName","osVersion","userAgent","appVersion","createRecognizerConfig","createServiceRecognizer","getAuthFromProperties","implRecognizerStop","recognize","stopRecognizing","enabled","SpeechServiceConnection_Key","authorizationToken","SpeechServiceAuthorization_Token","AudioSourceEvent","AudioSourceInitializingEvent","AudioSourceReadyEvent","AudioSourceOffEvent","AudioSourceErrorEvent","AudioStreamNodeEvent","AudioStreamNodeAttachingEvent","AudioStreamNodeAttachedEvent","AudioStreamNodeDetachedEvent","AudioStreamNodeErrorEvent","ChunkedArrayBufferStream","targetChunkSize","privTargetChunkSize","privNextBufferReadyBytes","bytesCopiedFromBuffer","privNextBufferToWrite","privNextBufferStartTime","bytesToCopy","targetView","sourceView","privIsWriteEnded","privIsReadEnded","privReaderQueue","streamChunk","throwIfClosed","privInstance","setEventSource","CancellationErrorCode","privKeys","privValues","def","keyToUse","clonedMap","destinationCollection","ServiceEvent","jsonstring","privJsonResult","ConnectionEvent","ConnectionStartEvent","ConnectionEstablishedEvent","ConnectionClosedEvent","ConnectionErrorEvent","privMessage","privType","ConnectionEstablishErrorEvent","statuscode","ConnectionMessageReceivedEvent","networkReceivedTimeISO","privNetworkReceivedTime","ConnectionMessageSentEvent","networkSentTimeISO","privNetworkSentTime","ConnectionState","BackgroundEvent","ServicePropertyChannel","SpeechRecognizer","speechConfig","speechConfigImpl","throwIfNull","privDisposedRecognizer","Detailed","recognizeOnceAsyncImpl","startContinuousRecognitionAsyncImpl","stopContinuousRecognitionAsyncImpl","configImpl","autoDetectSourceLanguageConfig","mergeTo","privPayload","actualSampleRate","desiredSampleRate","actualAudioFrame","audioFrame","downSampleAudioFrame","privActualSampleRate","privDesiredSampleRate","floatTo16BitPCM","setInt16","srcFrame","srcRate","dstRate","ratio","dstLength","dstFrame","Float32Array","srcOffset","dstOffset","nextSrcOffset","accum","mediaStream","outputStream","scriptNode","bufferSize","createScriptProcessor","audioSampleRate","waveStreamEncoder","onaudioprocess","inputFrame","inputBuffer","getChannelData","waveFrame","micInput","createMediaStreamSource","privSpeechProcessorScript","audioWorklet","addModule","workletNode","AudioWorkletNode","connect","destination","privMediaResources","scriptProcessorNode","releaseMediaResources","disconnect","getTracks","track","privRecorder","deviceId","privStreams","privInitializeDeferral","createAudioContext","nav","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","constraints","errorCallback","privMediaStream","active","video","errorMsg","resume","listen","privOutputChunkSize","getAudioContext","MicAudioSource","AUDIOFORMAT","destroyAudioContext","getMicrophoneLabel","label","setWorkletUrl","defaultMicrophoneName","privMicrophoneLabel","microphoneDeviceId","getSettings","enumerateDevices","devices","device","hasClose","suspend","file","filename","privHeaderEnd","privFilename","upload","privSource","privAudioFormatPromise","readHeader","File","headerResult","processHeader","getWord","getUint8","formatSize","getInt32","channelCount","getUint16","getUint32","maxHeaderSize","getWaveFormatPCM","reader","FileReader","onload","readAsArrayBuffer","h","processFile","buff","fileBuffer","AudioFormatToMimeType","audioDestinationId","privPlaybackStarted","privAppendingToBuffer","privMediaSourceOpened","privIsPaused","privAudioBuffer","updateSourceBuffer","privSourceBuffer","handleSourceBufferUpdateEnd","receivedAudio","_","audioBlob","privAudio","notifyPlayback","mimeType","warn","MediaSource","isTypeSupported","Audio","privMediaSource","onsourceopen","addSourceBuffer","onupdate","onupdateend","onupdatestart","currentTime","pause","play","sourceBufferAvailable","binary","shift","appendBuffer","canEndStream","endOfStream","onAudioStart","onended","onAudioEnd","updating","privFd","throwIfNotUndefined","privAudioFormat","headerOffset","privWriteStream","fd","autoClose","bytesWritten","pcmRecorder","audioStream","MediaStream","player","AudioConfig","fromDefaultSpeakerOutput","privDestination","ProfanityOption","speechImpl","SpeechServiceConnection_IntentRegion","hostName","speechRecognitionLanguage","channel","currentProperties","profanity","SpeechConfigImpl","SpeechServiceConnection_SynthLanguage","SpeechServiceConnection_SynthVoice","voice","SpeechServiceConnection_SynthOutputFormat"],"mappings":"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+a,UACL,OAAO/a,KAAKoH,aAhZxB,0BA4ZW,SAAakjB,GACZtqB,KAAKqqB,cACQ,IAAI/iB,SAAStH,KAAKoH,YAC1BG,UAAU,GAAI+iB,GAAa,KA/Z5C,oCAyaI,WACI,OAAOtqB,KAAKoqB,+BA1apB,8CAoEW,SAAuCG,GAC1C,YAAoC9nB,IAAhC8nB,EACOP,EAAsBvb,yBAE1Bub,EAAsBQ,sCACzBR,EAAsBS,oCAAoCF,MAzEtE,mDA4EW,SAA6CG,GAChD,OAAQA,GACJ,IAAK,2BACD,OAAO,IAAIV,EACPD,EAAeY,IACf,EACA,IACA,IACA,EACA,EACAD,EACAA,GACA,GACR,IAAK,+BACD,OAAO,IAAIV,EACPD,EAAea,MACf,EACA,KACA,IACA,GACA,EACAF,EACA,iCACA,GACR,IAAK,gCACD,OAAO,IAAIV,EACPD,EAAea,MACf,EACA,KACA,IACA,GACA,EACAF,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIV,EACPD,EAAec,IACf,EACA,KACA,KACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAIV,EACPD,EAAec,IACf,EACA,KACA,MACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIV,EACPD,EAAec,IACf,EACA,KACA,KACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIV,EACPD,EAAec,IACf,EACA,KACA,KACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIV,EACPD,EAAec,IACf,EACA,KACA,MACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAIV,EACPD,EAAec,IACf,EACA,KACA,MACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,gCACD,OAAO,IAAIV,EACPD,EAAee,UACf,EACA,KACA,KACA,EACA,GACAJ,EACAA,GACA,GAER,IAAK,2BACD,OAAO,IAAIV,EACPD,EAAeY,IACf,EACA,IACA,KACA,EACA,GACAD,EACA,2BACA,GACR,IAAK,4BACD,OAAO,IAAIV,EACPD,EAAeY,IACf,EACA,KACA,KACA,EACA,GACAD,EACA,4BACA,GACR,IAAK,4BACD,OAAO,IAAIV,EACPD,EAAegB,MACf,EACA,IACA,IACA,EACA,EACAL,EACA,4BACA,GACR,IAAK,2BACD,OAAO,IAAIV,EACPD,EAAeY,IACf,EACA,KACA,KACA,EACA,GACAD,EACA,4BACA,GACR,IAAK,2BACD,OAAO,IAAIV,EACPD,EAAeY,IACf,EACA,KACA,KACA,EACA,GACAD,EACA,4BACA,GACR,IAAK,0BACD,OAAO,IAAIV,EACPD,EAAeY,IACf,EACA,IACA,KACA,EACA,GACAD,EACA,2BACA,GACR,IAAK,4BACD,OAAO,IAAIV,EACPD,EAAeiB,SACf,EACA,KACA,KACA,EACA,GACAN,EACAA,GACA,GACR,IAAK,4BACD,OAAO,IAAIV,EACPD,EAAeiB,SACf,EACA,KACA,KACA,EACA,GACAN,EACAA,GACA,GACR,IAAK,2BACD,OAAO,IAAIV,EACPD,EAAeY,IACf,EACA,KACA,KACA,EACA,GACAD,EACA,4BACA,GACR,IAAK,4BACD,OAAO,IAAIV,EACPD,EAAeY,IACf,EACA,KACA,KACA,EACA,GACAD,EACA,4BACA,GACR,IAAK,kCACD,OAAO,IAAIV,EACPD,EAAec,IACf,EACA,KACA,MACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAIV,EACPD,EAAec,IACf,EACA,KACA,MACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,4BACD,OAAO,IAAIV,EACPD,EAAeiB,SACf,EACA,KACA,KACA,EACA,GACAN,EACAA,GACA,GACR,IAAK,6BACD,OAAO,IAAIV,EACPD,EAAekB,UACf,EACA,KACA,IACA,EACA,GACAP,EACAA,GACA,GACR,IAAK,6BACD,OAAO,IAAIV,EACPD,EAAekB,UACf,EACA,KACA,IACA,EACA,GACAP,EACAA,GACA,GACR,IAAK,4BACL,QACI,OAAO,IAAIV,EACPD,EAAeY,IACf,EACA,KACA,KACA,EACA,GACA,4BACA,4BACA,MA7W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","file":"static/js/1.3cfebadd.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","module.exports = require(\"regenerator-runtime\");\n","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Make sure not to export internal modules.\r\n//\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication\";\r\nexport * from \"./CognitiveTokenAuthentication\";\r\nexport * from \"./IAuthentication\";\r\nexport * from \"./IConnectionFactory\";\r\nexport * from \"./ISynthesisConnectionFactory\";\r\nexport * from \"./IntentConnectionFactory\";\r\nexport * from \"./RecognitionEvents\";\r\nexport * from \"./ServiceRecognizerBase\";\r\nexport * from \"./RecognizerConfig\";\r\nexport * from \"./SpeechServiceInterfaces\";\r\nexport * from \"./WebsocketMessageFormatter\";\r\nexport * from \"./SpeechConnectionFactory\";\r\nexport * from \"./TranscriberConnectionFactory\";\r\nexport * from \"./TranslationConnectionFactory\";\r\nexport * from \"./SpeechSynthesisConnectionFactory\";\r\nexport * from \"./EnumTranslation\";\r\nexport * from \"./ServiceMessages/Enums\";\r\nexport * from \"./ServiceMessages/TranslationSynthesisEnd\";\r\nexport * from \"./ServiceMessages/TranslationHypothesis\";\r\nexport * from \"./ServiceMessages/TranslationPhrase\";\r\nexport * from \"./TranslationServiceRecognizer\";\r\nexport * from \"./ServiceMessages/SpeechDetected\";\r\nexport * from \"./ServiceMessages/SpeechHypothesis\";\r\nexport * from \"./SpeechServiceRecognizer\";\r\nexport * from \"./TranscriptionServiceRecognizer\";\r\nexport * from \"./ServiceMessages/DetailedSpeechPhrase\";\r\nexport * from \"./ServiceMessages/SimpleSpeechPhrase\";\r\nexport * from \"./AddedLmIntent\";\r\nexport * from \"./IntentServiceRecognizer\";\r\nexport * from \"./ServiceMessages/IntentResponse\";\r\nexport * from \"./RequestSession\";\r\nexport * from \"./SpeechContext\";\r\nexport * from \"./DynamicGrammarBuilder\";\r\nexport * from \"./DynamicGrammarInterfaces\";\r\nexport * from \"./DialogServiceAdapter\";\r\nexport * from \"./AgentConfig\";\r\nexport * from \"./Transcription/Exports\";\r\nexport * from \"./ServiceMessages/SynthesisAudioMetadata\";\r\nexport * from \"./SynthesisTurn\";\r\nexport * from \"./SynthesisAdapterBase\";\r\nexport * from \"./SynthesizerConfig\";\r\nexport * from \"./SynthesisContext\";\r\nexport * from \"./SpeakerRecognitionConfig\";\r\nexport * from \"./SpeakerIdMessageAdapter\";\r\n\r\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\r\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\r\nexport const ServicePropertiesPropertyName: string = \"ServiceProperties\";\r\nexport const ForceDictationPropertyName: string = \"ForceDictation\";\r\nexport const AutoDetectSourceLanguagesOpenRangeOptionName: string = \"OpenRange\";\r\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nimport isNativeFunction from \"@babel/runtime/helpers/esm/isNativeFunction\";\nimport construct from \"@babel/runtime/helpers/esm/construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst createGuid: () => string = (): string => {\r\n    return uuid();\r\n};\r\n\r\nconst createNoDashGuid: () => string = (): string => {\r\n    return createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n};\r\n\r\nexport { createGuid, createNoDashGuid };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    public static throwIfNullOrUndefined(param: any, name: string): void {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNull(param: any, name: string): void {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfDisposed(isDisposed: boolean): void {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n\r\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n\r\n    public static throwIfFileDoesNotExist(param: any, name: string): void {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n\r\n        // TODO check for file existence.\r\n    }\r\n\r\n    public static throwIfNotUndefined(param: any, name: string): void {\r\n        if (param !== undefined) {\r\n            throw new Error(\"throwIfNotUndefined:\" + name);\r\n        }\r\n    }\r\n}\r\n","var unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nmodule.exports = _createForOfIteratorHelper;","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     *        uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1) {\r\n        super();\r\n        this.formatTag = 1;\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        this.privHeader = new ArrayBuffer(44);\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n        const view = new DataView(this.privHeader);\r\n\r\n        /* RIFF identifier */\r\n        this.setString(view, 0, \"RIFF\");\r\n        /* file length */\r\n        view.setUint32(4, 0, true);\r\n        /* RIFF type & Format */\r\n        this.setString(view, 8, \"WAVEfmt \");\r\n        /* format chunk length */\r\n        view.setUint32(16, 16, true);\r\n        /* sample format (raw) */\r\n        view.setUint16(20, 1, true);\r\n        /* channel count */\r\n        view.setUint16(22, this.channels, true);\r\n        /* sample rate */\r\n        view.setUint32(24, this.samplesPerSec, true);\r\n        /* byte rate (sample rate * block align) */\r\n        view.setUint32(28, this.avgBytesPerSec, true);\r\n        /* block align (channel count * bytes per sample) */\r\n        view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n        /* bits per sample */\r\n        view.setUint16(34, this.bitsPerSample, true);\r\n        /* data chunk identifier */\r\n        this.setString(view, 36, \"data\");\r\n        /* data chunk length */\r\n        view.setUint32(40, 0, true);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    public static getAudioContext(sampleRate?: number): AudioContext {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = (window as any).AudioContext // our preferred impl\r\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            } else {\r\n                return new AudioContext();\r\n            }\r\n        } else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void { return; }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString = (view: DataView, offset: number, str: string): void => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class HeaderNames {\r\n    public static AuthKey: string = \"Ocp-Apim-Subscription-Key\";\r\n    public static ConnectionId: string = \"X-ConnectionId\";\r\n    public static ContentType: string = \"Content-Type\";\r\n    public static CustomCommandsAppId: string = \"X-CommandsAppId\";\r\n    public static Path: string = \"Path\";\r\n    public static RequestId: string = \"X-RequestId\";\r\n    public static RequestStreamId: string = \"X-StreamId\";\r\n    public static RequestTimestamp: string = \"X-Timestamp\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n    private privSessionId: string;\r\n\r\n    constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private privAuthFetchEventid: string;\r\n\r\n    constructor(requestId: string, authFetchEventid: string, sessionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.privAuthFetchEventid = authFetchEventid;\r\n    }\r\n\r\n    public get authFetchEventid(): string {\r\n        return this.privAuthFetchEventid;\r\n    }\r\n}\r\n\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n    private privServiceTag: string;\r\n    private privStatus: RecognitionCompletionStatus;\r\n    private privError: string;\r\n\r\n    constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        sessionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privStatus = status;\r\n        this.privError = error;\r\n        this.privServiceTag = serviceTag;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n\r\n    public get serviceTag(): string {\r\n        return this.privServiceTag;\r\n    }\r\n\r\n    public get status(): RecognitionCompletionStatus {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface IAuthentication {\r\n    fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private privHeaderName: string;\r\n    private privToken: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.privHeaderName = headerName;\r\n        this.privToken = token;\r\n    }\r\n\r\n    public get headerName(): string {\r\n        return this.privHeaderName;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privToken;\r\n    }\r\n}\r\n","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var defineProperty = require(\"./defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread2;","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private privName: string;\r\n    private privEventId: string;\r\n    private privEventTime: string;\r\n    private privEventType: EventType;\r\n    private privMetadata: IStringDictionary<string>;\r\n\r\n    constructor(eventName: string, eventType: EventType) {\r\n        this.privName = eventName;\r\n        this.privEventId = createNoDashGuid();\r\n        this.privEventTime = new Date().toISOString();\r\n        this.privEventType = eventType;\r\n        this.privMetadata = { };\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get eventId(): string {\r\n        return this.privEventId;\r\n    }\r\n\r\n    public get eventTime(): string {\r\n        return this.privEventTime;\r\n    }\r\n\r\n    public get eventType(): EventType {\r\n        return this.privEventType;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                await this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisResult } from \"./Exports\";\r\n\r\n/**\r\n * Defines contents of speech synthesis events.\r\n * @class SpeechSynthesisEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisEventArgs {\r\n    private readonly privResult: SpeechSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechSynthesisResult} result - The speech synthesis result.\r\n     */\r\n    public constructor(result: SpeechSynthesisResult) {\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the synthesis result.\r\n     * @member SpeechSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisResult} the synthesis result.\r\n     */\r\n    public get result(): SpeechSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SpeechSynthesisResult\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privAudioData: ArrayBuffer;\r\n    private privErrorDetails: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {number} audioData - The offset into the stream.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    constructor(resultId?: string, reason?: ResultReason,  audioData?: ArrayBuffer,\r\n                errorDetails?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privAudioData = audioData;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member SpeechSynthesisResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member SpeechSynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The synthesized audio data\r\n     * @member SpeechSynthesisResult.prototype.audioData\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} The synthesized audio data.\r\n     */\r\n    public get audioData(): ArrayBuffer {\r\n        return this.privAudioData;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful synthesis, provides details of the occurred error.\r\n     * @member SpeechSynthesisResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     *  The set of properties exposed in the result.\r\n     * @member SpeechSynthesisResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis word boundary event.\r\n * @class SpeechSynthesisWordBoundaryEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisWordBoundaryEventArgs {\r\n    private privAudioOffset: number;\r\n    private privText: string;\r\n    private privWordLength: number;\r\n    private privTextOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The text.\r\n     * @param {number} wordLength - The length of the word.\r\n     * @param {number} textOffset - The text offset.\r\n     */\r\n    public constructor(audioOffset: number, text: string, wordLength: number, textOffset: number) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n        this.privWordLength = wordLength;\r\n        this.privTextOffset = textOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text of the word boundary event.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Specifies the word length\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength\r\n     * @function\r\n     * @public\r\n     * @returns {number} the word length\r\n     */\r\n    public get wordLength(): number {\r\n        return this.privWordLength;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the text offset.\r\n     */\r\n    public get textOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis bookmark event.\r\n * @class SpeechSynthesisBookmarkEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisBookmarkEventArgs {\r\n    private privAudioOffset: number;\r\n    private privText: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The bookmark text.\r\n     */\r\n    public constructor(audioOffset: number, text: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the bookmark.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the bookmark text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis viseme event.\r\n * @class SpeechSynthesisVisemeEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisVisemeEventArgs {\r\n    private privAudioOffset: number;\r\n    private privVisemeId: number;\r\n    private privAnimation: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} visemeId - The viseme ID.\r\n     * @param {string} animation - The animation, could be in svg or other format.\r\n     */\r\n    public constructor(audioOffset: number, visemeId: number, animation: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privVisemeId = visemeId;\r\n        this.privAnimation = animation;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the viseme ID.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId\r\n     * @function\r\n     * @public\r\n     * @returns {number} the viseme ID.\r\n     */\r\n    public get visemeId(): number {\r\n        return this.privVisemeId;\r\n    }\r\n\r\n    /**\r\n     * Specifies the animation.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.animation\r\n     * @function\r\n     * @public\r\n     * @returns {string} the animation, could be in svg or other format.\r\n     */\r\n    public get animation(): string {\r\n        return this.privAnimation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSpeechSynthesizer: SpeechSynthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => any = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\r\n    public get activityTemplate(): string { return this.privActivityTemplate; }\r\n\r\n    protected receiveMessageOverride: () => any = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => any = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => any = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext(this.privSpeechSynthesizer);\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static addHeader(audio: ArrayBuffer, format: AudioOutputFormatImpl): ArrayBuffer {\r\n        if (!format.hasHeader) {\r\n            return audio;\r\n        }\r\n        format.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\r\n        tmp.set(new Uint8Array(format.header), 0);\r\n        tmp.set(new Uint8Array(audio), format.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSpeechSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                new SpeechSynthesisResult(\r\n                    requestId,\r\n                    ResultReason.SynthesizingAudioStarted,\r\n                )\r\n            );\r\n\r\n            if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n                this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n            }\r\n\r\n            const messageRetrievalPromise = this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack?: (e: string) => void): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse();\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            if (!!this.privSpeechSynthesizer.synthesizing) {\r\n                                try {\r\n                                    const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\r\n                                    const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                                        new SpeechSynthesisResult(\r\n                                            this.privSynthesisTurn.requestId,\r\n                                            ResultReason.SynthesizingAudio,\r\n                                            audioWithHeader));\r\n                                    this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n                                } catch (error) {\r\n                                    // Not going to let errors in the event handler\r\n                                    // trip things up.\r\n                                }\r\n                            }\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                    this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);\r\n\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        this.privSynthesisTurn.currentTextOffset);\r\n\r\n                                    if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n                                        try {\r\n                                            this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n\r\n                                    if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n                                        try {\r\n                                            this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n\r\n                                        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n                                            try {\r\n                                                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n                                            } catch (error) {\r\n                                                // Not going to let errors in the event handler\r\n                                                // trip things up.\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            const audioBuffer: ArrayBuffer = await this.privSynthesisTurn.getAllReceivedAudioWithHeader();\r\n                            result = new SpeechSynthesisResult(\r\n                                this.privSynthesisTurn.requestId,\r\n                                ResultReason.SynthesizingAudioCompleted,\r\n                                audioBuffer\r\n                            );\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error);\r\n                            }\r\n                        }\r\n                        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n                            try {\r\n                                this.privSpeechSynthesizer.synthesisCompleted(\r\n                                    this.privSpeechSynthesizer,\r\n                                    new SpeechSynthesisEventArgs(result)\r\n                                );\r\n                            } catch (e) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext = (connection: IConnection): Promise<void> => {\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo) => {\r\n            await this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent) => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                await this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                await this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                return Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n            }\r\n        }, async (error: string): Promise<IConnection> => {\r\n            await this.privSynthesisTurn.onAuthCompleted(true, error);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        this.privConnectionPromise.catch(() => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig = (connection: IConnection, SpeechServiceConfigJson: string): Promise<void> => {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage = (connection: IConnection, ssml: string, requestId: string): Promise<void> => {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n}\r\n","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode = RecognitionMode.Interactive;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n\r\n    constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n}\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize = (): string => {\r\n        return JSON.stringify(this, (key: any, value: any): any => {\r\n            if (value && typeof value === \"object\") {\r\n                const replacement: any = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n\r\n    constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.16.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    OGG_OPUS,\r\n    WEBM_OPUS,\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.16.0\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage = (message: ConnectionMessage): SpeechConnectionMessage => {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                        requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { SpeechSynthesizer } from \"../sdk/Exports\";\r\n\r\n/**\r\n * Represents the JSON used in the synthesis.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SynthesisContext {\r\n    private privContext: { [section: string]: any } = {};\r\n    private privSpeechSynthesizer: SpeechSynthesizer;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n\r\n    constructor(speechSynthesizer: SpeechSynthesizer) {\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n    }\r\n\r\n    /**\r\n     * Adds a section to the synthesis.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: any): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio output format for synthesis context generation.\r\n     * @param format {AudioOutputFormatImpl} the output format\r\n     */\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const synthesisSection: ISynthesisSection = this.buildSynthesisContext();\r\n        this.setSection(\"synthesis\", synthesisSection);\r\n\r\n        return JSON.stringify(this.privContext);\r\n    }\r\n\r\n    private buildSynthesisContext(): ISynthesisSection {\r\n        return {\r\n            audio: {\r\n                metadataOptions: {\r\n                    bookmarkEnabled: (!!this.privSpeechSynthesizer.bookmarkReached),\r\n                    sentenceBoundaryEnabled: false,\r\n                    visemeEnabled: (!!this.privSpeechSynthesizer.visemeReceived),\r\n                    wordBoundaryEnabled: (!!this.privSpeechSynthesizer.wordBoundary),\r\n                },\r\n                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\r\n            },\r\n            language: {\r\n                autoDetection: this.privSpeechSynthesizer.autoDetectSourceLanguage\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\ninterface ISynthesisSection {\r\n    audio: {\r\n        outputFormat: string,\r\n        metadataOptions: {\r\n            bookmarkEnabled: boolean,\r\n            wordBoundaryEnabled: boolean,\r\n            visemeEnabled: boolean,\r\n            sentenceBoundaryEnabled: boolean,\r\n        }\r\n    };\r\n    language: {\r\n        autoDetection: boolean\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Represents the JSON used in the agent.config message sent to the speech service.\r\n */\r\nexport class AgentConfig {\r\n    private iPrivConfig: IAgentConfig;\r\n\r\n    public toJsonString(): string {\r\n        return JSON.stringify(this.iPrivConfig);\r\n    }\r\n\r\n    public get(): IAgentConfig {\r\n        return this.iPrivConfig;\r\n    }\r\n\r\n    /**\r\n     * Setter for the agent.config object.\r\n     * @param value a JSON serializable object.\r\n     */\r\n    public set(value: IAgentConfig): void {\r\n        this.iPrivConfig = value;\r\n    }\r\n}\r\n\r\nexport interface IAgentConfig {\r\n    botInfo: {\r\n        commType: string,\r\n        connectionId: string,\r\n        conversationId: string,\r\n        fromId: string\r\n        commandsCulture: string,\r\n        ttsAudioFormat: string\r\n    };\r\n    version: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport enum MetadataType {\r\n    WordBoundary = \"WordBoundary\",\r\n    Bookmark = \"Bookmark\",\r\n    Viseme = \"Viseme\"\r\n}\r\n\r\nexport interface ISynthesisMetadata {\r\n    Type: MetadataType;\r\n    Data: {\r\n        Offset: number;\r\n        text: {\r\n            Text: string;\r\n            Length: number;\r\n        };\r\n        Bookmark: string;\r\n        VisemeId: number;\r\n        AnimationChunk: string;\r\n        IsLastAnimation: boolean;\r\n    };\r\n}\r\n\r\n// audio.metadata\r\nexport interface ISynthesisAudioMetadata {\r\n    Metadata: ISynthesisMetadata[];\r\n}\r\n\r\nexport class SynthesisAudioMetadata implements ISynthesisAudioMetadata {\r\n    private privSynthesisAudioMetadata: ISynthesisAudioMetadata;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisAudioMetadata = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): SynthesisAudioMetadata {\r\n        return new SynthesisAudioMetadata(json);\r\n    }\r\n\r\n    public get Metadata(): ISynthesisMetadata[] {\r\n        return this.privSynthesisAudioMetadata.Metadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IDynamicGrammar,\r\n    IDynamicGrammarGeneric,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n\r\n    private privPhrases: string[];\r\n    private privGrammars: string[];\r\n\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    public addPhrase(phrase: string | string[]): void {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase as string[]);\r\n        } else {\r\n            this.privPhrases.push(phrase as string);\r\n        }\r\n    }\r\n\r\n    // Clears all phrases stored in the current object.\r\n    public clearPhrases(): void {\r\n        this.privPhrases = undefined;\r\n    }\r\n\r\n    // Adds one or more reference grammars to the current grammar.\r\n    public addReferenceGrammar(grammar: string | string[]): void {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar as string[]);\r\n        } else {\r\n            this.privGrammars.push(grammar as string);\r\n        }\r\n    }\r\n\r\n    // clears all grammars stored on the recognizer.\r\n    public clearGrammars(): void {\r\n        this.privGrammars = undefined;\r\n    }\r\n\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    public generateGrammarObject(): IDynamicGrammar {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const retObj: IDynamicGrammar = {};\r\n        retObj.ReferenceGrammars = this.privGrammars;\r\n\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases: IDynamicGrammarGeneric[] = [];\r\n\r\n            this.privPhrases.forEach((value: string, index: number, array: string[]): void => {\r\n                retPhrases.push({\r\n                    Text: value,\r\n                });\r\n            });\r\n\r\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\r\n        }\r\n\r\n        return retObj;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    IDynamicGrammar,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Represents the JSON used in the speech.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SpeechContext {\r\n    private privContext: { [section: string]: any } = {};\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n\r\n    constructor(dynamicGrammar: DynamicGrammarBuilder) {\r\n        this.privDynamicGrammar = dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Adds a section to the speech.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: any): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * This is only used by pronunciation assessment config.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public setPronunciationAssessmentParams(params: string): void {\r\n        if (this.privContext.phraseDetection === undefined) {\r\n            this.privContext.phraseDetection = {\r\n                enrichment: {\r\n                    pronunciationAssessment: {}\r\n                }\r\n            };\r\n        }\r\n        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params);\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n        this.privContext.phraseOutput.detailed.options.push(\"PronunciationAssessment\");\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"WordTimings\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"WordTimings\");\r\n        }\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const dgi: IDynamicGrammar = this.privDynamicGrammar.generateGrammarObject();\r\n        this.setSection(\"dgi\", dgi);\r\n\r\n        const ret: string = JSON.stringify(this.privContext);\r\n        return ret;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.endDetected\r\nexport interface ISpeechDetected {\r\n    Offset: number;\r\n}\r\n\r\nexport class SpeechDetected implements ISpeechDetected {\r\n    private privSpeechStartDetected: ISpeechDetected;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechStartDetected = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechDetected {\r\n        return new SpeechDetected(json);\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechStartDetected.Offset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n} from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication\r\n} from \"./IAuthentication\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\n\r\nconst AuthHeader: string = \"Authorization\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.privFetchCallback = fetchCallback;\r\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return this.privFetchCallback(authFetchEventId).then((token: string) => new AuthInfo(AuthHeader, token));\r\n    }\r\n\r\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return this.privFetchOnExpiryCallback(authFetchEventId).then((token: string) => new AuthInfo(AuthHeader, token));\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage = (message: RawWebsocketMessage): Promise<ConnectionMessage> => {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    public fromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n\r\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    private makeHeaders = (message: ConnectionMessage): string => {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders = (headersString: string): IStringDictionary<string> => {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer = (str: string): ArrayBuffer => {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage } from \"./SimpleSpeechPhrase\";\r\n\r\n// speech.hypothesis\r\nexport interface ISpeechHypothesis {\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport class SpeechHypothesis implements ISpeechHypothesis {\r\n    private privSpeechHypothesis: ISpeechHypothesis;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechHypothesis = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechHypothesis {\r\n        return new SpeechHypothesis(json);\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechHypothesis.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechHypothesis.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechHypothesis.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSpeechHypothesis.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus } from \"../Exports\";\r\n\r\n// speech.phrase\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    DisplayText: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPrimaryLanguage {\r\n    Language: string;\r\n    Confidence: string;\r\n}\r\n\r\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\r\n    private privSimpleSpeechPhrase: ISimpleSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privSimpleSpeechPhrase = JSON.parse(json);\r\n        this.privSimpleSpeechPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privSimpleSpeechPhrase.RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): SimpleSpeechPhrase {\r\n        return new SimpleSpeechPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get DisplayText(): string {\r\n        return this.privSimpleSpeechPhrase.DisplayText;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSimpleSpeechPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSimpleSpeechPhrase.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSimpleSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nexport enum SynthesisStatus {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    Success,\r\n\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisEnd,\r\n\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\r\nexport enum RecognitionStatus {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n    TooManyRequests,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports\";\r\nimport { RecognitionStatus } from \"./Exports\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.EndOfDictation:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display: string;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json);\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privDetailedSpeechPhrase.RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class ConnectionOpenResponse {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    constructor(statusCode: number, reason: string) {\r\n        this.privStatusCode = statusCode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\n// Node.JS specific web socket / browser support.\r\nimport ws from \"ws\";\r\nimport { CertCheckAgent } from \"./CertChecks\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string; };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string; },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open = (): Promise<ConnectionOpenResponse> => {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n                const checkAgent: CertCheckAgent = new CertCheckAgent(this.proxyInfo);\r\n\r\n                options.agent = checkAgent.GetAgent();\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (e: { target: WebSocket | ws }) => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }) => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }) => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send = (message: ConnectionMessage): Promise<void> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage) => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string) => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read = (): Promise<ConnectionMessage> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close = (reason?: string): Promise<void> => {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage = (sendItem: ISendItem): Promise<void> => {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem) => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent = (event: ConnectionEvent): void => {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private privUri: string;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\r\n    private privId: string;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        enableCompression: boolean = false,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.privMessageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(queryParameters[paramName]);\r\n                    queryParams += `${paramName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.privUri,\r\n            this.id,\r\n            this.privMessageFormatter,\r\n            proxyInfo,\r\n            headers,\r\n            enableCompression);\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        this.privIsDisposed = true;\r\n\r\n        if (this.privConnectionMessageAdapter) {\r\n            await this.privConnectionMessageAdapter.close();\r\n        }\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public state = (): ConnectionState => {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n\r\n    public open = (): Promise<ConnectionOpenResponse> => {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n\r\n    public send = (message: ConnectionMessage): Promise<void> => {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n\r\n    public read = (): Promise<ConnectionMessage> => {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognizerConfig } from \"../common.speech/Exports\";\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\r\n\r\nexport class ProxyInfo {\r\n    private privProxyHostName: string;\r\n    private privProxyPort: number;\r\n    private privProxyUserName: string;\r\n    private privProxyPassword: string;\r\n\r\n    private constructor(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string) {\r\n        this.privProxyHostName = proxyHostName;\r\n        this.privProxyPort = proxyPort;\r\n        this.privProxyUserName = proxyUserName;\r\n        this.privProxyPassword = proxyPassword;\r\n    }\r\n\r\n    public static fromParameters(parameters: PropertyCollection): ProxyInfo {\r\n        return new ProxyInfo(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyHostName),\r\n            parseInt(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPort), 10),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyUserName),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPassword));\r\n    }\r\n\r\n    public static fromRecognizerConfig(config: RecognizerConfig): ProxyInfo {\r\n        return this.fromParameters(config.parameters);\r\n    }\r\n\r\n    public get HostName(): string {\r\n        return this.privProxyHostName;\r\n    }\r\n\r\n    public get Port(): number {\r\n        return this.privProxyPort;\r\n    }\r\n\r\n    public get UserName(): string {\r\n        return this.privProxyUserName;\r\n    }\r\n\r\n    public get Password(): string {\r\n        return this.privProxyPassword;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class QueryParameterNames {\r\n    public static BotId: string = \"botid\";\r\n    public static CustomSpeechDeploymentId: string = \"cid\";\r\n    public static CustomVoiceDeploymentId: string = \"deploymentId\";\r\n    public static EnableAudioLogging: string = \"storeAudio\";\r\n    public static EnableLanguageId: string = \"lidEnabled\";\r\n    public static EnableWordLevelTimestamps: string = \"wordLevelTimestamps\";\r\n    public static EndSilenceTimeoutMs: string = \"endSilenceTimeoutMs\";\r\n    public static Format: string = \"format\";\r\n    public static InitialSilenceTimeoutMs: string = \"initialSilenceTimeoutMs\";\r\n    public static Language: string = \"language\";\r\n    public static Profanity: string = \"profanity\";\r\n    public static RequestBotStatusMessages: string = \"enableBotMessageStatus\";\r\n    public static StableIntermediateThreshold: string = \"stableIntermediateThreshold\";\r\n    public static StableTranslation: string = \"stableTranslation\";\r\n    public static TestHooks: string = \"testhooks\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { AuthInfo, IConnectionFactory, RecognitionMode, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EnableAudioLogging,\r\n            QueryParameterNames.EnableAudioLogging,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps,\r\n            QueryParameterNames.EnableWordLevelTimestamps,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_ProfanityOption,\r\n            QueryParameterNames.Profanity,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n            QueryParameterNames.InitialSilenceTimeoutMs,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs,\r\n            QueryParameterNames.EndSilenceTimeoutMs,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_StablePartialResultThreshold,\r\n            QueryParameterNames.StableIntermediateThreshold,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        Object.keys(serviceProperties).forEach((value: string, num: number, array: string[]) => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string =  (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        endpoint = host + this.conversationRelativeUri;\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privText: string;\r\n    private privDuration: number;\r\n    private privOffset: number;\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n    private privErrorDetails: string;\r\n    private privJson: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number,\r\n                offset?: number, language?: string, languageDetectionConfidence?: string, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Duration of recognized speech in 100 nano second incements.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second incements.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Offset of recognized speech in 100 nano second incements.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second incements.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detected.\r\n     * @member RecognitionResult.prototype.language\r\n     * @function\r\n     * @public\r\n     * @returns {string} language detected.\r\n     */\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detection confidence (Unknown, Low, Medium, High).\r\n     * @member RecognitionResult.prototype.languageDetectionConfidence\r\n     * @function\r\n     * @public\r\n     * @returns {string} detection confidence strength.\r\n     */\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    public get json(): string {\r\n        return this.privJson;\r\n    }\r\n\r\n    /**\r\n     *  The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionEventArgs, SpeechRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: SpeechRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): SpeechRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines contents of conversation transcribed/transcribing event.\r\n * @class ConversationTranscriptionEventArgs\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConversationTranscriptionEventArgs extends SpeechRecognitionEventArgs {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase\";\r\n\r\nexport class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationEventArgs,\r\n    CancellationReason,\r\n    RecognitionEventArgs\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines content of a CancellationEvent.\r\n * @class CancellationEventArgsBase\r\n */\r\nexport class CancellationEventArgsBase extends RecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string,\r\n                       errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationEventArgsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful operation.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful operation, provides details of the occurred error.\r\n     * @member CancellationEventArgsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n        if (recognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = recognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                languages: sourceLanguages,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus),\r\n                        undefined);\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                detailed.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioStreamFormatImpl } from \"../../src/sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n} from \"../common/Exports\";\r\n\r\nexport class ReplayableAudioNode implements IAudioStreamNode {\r\n    private privAudioNode: IAudioStreamNode;\r\n    private privBytesPerSecond: number;\r\n    private privBuffers: BufferEntry[] = [];\r\n    private privReplayOffset: number = 0;\r\n    private privLastShrinkOffset: number = 0;\r\n    private privBufferStartOffset: number = 0;\r\n    private privBufferSerial: number = 0;\r\n    private privBufferedBytes: number = 0;\r\n    private privReplay: boolean = false;\r\n    private privLastChunkAcquiredTime: number = 0;\r\n\r\n    public constructor(audioSource: IAudioStreamNode, bytesPerSecond: number) {\r\n        this.privAudioNode = audioSource;\r\n        this.privBytesPerSecond = bytesPerSecond;\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privAudioNode.id();\r\n    }\r\n\r\n    // Reads and returns the next chunk of audio buffer.\r\n    // If replay of existing buffers are needed, read() will first seek and replay\r\n    // existing content, and upoin completion it will read new content from the underlying\r\n    // audio node, saving that content into the replayable buffers.\r\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\r\n        // if there is a replay request to honor.\r\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\r\n            // Find the start point in the buffers.\r\n            // Offsets are in 100ns increments.\r\n            // So how many bytes do we need to seek to get the right offset?\r\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\r\n\r\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n            if (0 !== (bytesToSeek % 2)) {\r\n                bytesToSeek++;\r\n            }\r\n\r\n            let i: number = 0;\r\n\r\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n            }\r\n\r\n            if (i < this.privBuffers.length) {\r\n                const retVal: ArrayBuffer = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\r\n\r\n                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\r\n\r\n                // If we've reached the end of the buffers, stop replaying.\r\n                if (i === this.privBuffers.length - 1) {\r\n                    this.privReplay = false;\r\n                }\r\n\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: retVal,\r\n                    isEnd: false,\r\n                    timeReceived: this.privBuffers[i].chunk.timeReceived,\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.privAudioNode.read()\r\n            .then((result: IStreamChunk<ArrayBuffer>) => {\r\n                if (result && result.buffer) {\r\n                    this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\r\n                    this.privBufferedBytes += result.buffer.byteLength;\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    public detach(): Promise<void> {\r\n        this.privBuffers = undefined;\r\n        return this.privAudioNode.detach();\r\n    }\r\n\r\n    public replay(): void {\r\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\r\n            this.privReplay = true;\r\n            this.privReplayOffset = this.privLastShrinkOffset;\r\n        }\r\n    }\r\n\r\n    // Shrinks the existing audio buffers to start at the new offset, or at the\r\n    // beginning of the buffer closest to the requested offset.\r\n    // A replay request will start from the last shrink point.\r\n    public shrinkBuffers(offset: number): void {\r\n        if (this.privBuffers === undefined || this.privBuffers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.privLastShrinkOffset = offset;\r\n\r\n        // Find the start point in the buffers.\r\n        // Offsets are in 100ns increments.\r\n        // So how many bytes do we need to seek to get the right offset?\r\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\r\n\r\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n\r\n        let i: number = 0;\r\n\r\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n        }\r\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\r\n        this.privBuffers = this.privBuffers.slice(i);\r\n    }\r\n\r\n    // Finds the time a buffer of audio was first seen by offset.\r\n    public findTimeAtOffset(offset: number): number {\r\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        for (const value of this.privBuffers) {\r\n            const startOffset: number = (value.byteOffset / this.privBytesPerSecond) * 1e7;\r\n            const endOffset: number = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\r\n\r\n            if (offset >= startOffset && offset <= endOffset) {\r\n                return value.chunk.timeReceived;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Primary use of this class is to help debugging problems with the replay\r\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\r\n// the ArrayBuffer directly.\r\n// tslint:disable-next-line:max-classes-per-file\r\nclass BufferEntry {\r\n    public chunk: IStreamChunk<ArrayBuffer>;\r\n    public serial: number;\r\n    public byteOffset: number;\r\n\r\n    public constructor(chunk: IStreamChunk<ArrayBuffer>, serial: number, byteOffset: number) {\r\n        this.chunk = chunk;\r\n        this.serial = serial;\r\n        this.byteOffset = byteOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ntype TWorkerMessage = ICallNotification | IClearResponse | IErrorNotification | IErrorResponse;\r\n\r\ninterface IClearResponse {\r\n    error: null;\r\n    id: number;\r\n}\r\n\r\ninterface IErrorNotification {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: null;\r\n    result: null;\r\n}\r\n\r\ninterface IErrorResponse {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: number;\r\n    result: null;\r\n}\r\n\r\ninterface ICallNotification {\r\n    id: null;\r\n    method: \"call\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface ISetNotification {\r\n    id: null;\r\n    method: \"set\";\r\n    params: {\r\n        delay: number;\r\n        now: number;\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IClearRequest {\r\n    id: number;\r\n    method: \"clear\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IWorkerEvent extends Event {\r\n    data: TWorkerMessage;\r\n}\r\n\r\ninterface IWorkerTimers {\r\n    clearTimeout: (timerId: number) => void;\r\n    setTimeout: (func: () => any, delay: number) => number;\r\n}\r\n\r\ndeclare type Func = () => any;\r\n\r\nexport class Timeout {\r\n\r\n    private static workerTimers: null | IWorkerTimers = null;\r\n\r\n    public static clearTimeout: IWorkerTimers[\"clearTimeout\"] = (timerId) => Timeout.timers().clearTimeout(timerId);\r\n\r\n    public static setTimeout: IWorkerTimers[\"setTimeout\"] = (func, delay) => Timeout.timers().setTimeout(func, delay);\r\n\r\n    public static load = (url: string) => {\r\n        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\r\n        const scheduledTimeoutFunctions: Map<number, number | Func> = new Map([[0, () => { }]]); // tslint:disable-line no-empty\r\n        const unhandledRequests: Map<number, number> = new Map();\r\n\r\n        const worker = new Worker(url);\r\n\r\n        worker.addEventListener(\"message\", ({ data }: IWorkerEvent) => {\r\n            if (Timeout.isCallNotification(data)) {\r\n                const {\r\n                    params: { timerId }\r\n                } = data;\r\n\r\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\r\n\r\n                if (typeof idOrFunc === \"number\") {\r\n                    const unhandledTimerId = unhandledRequests.get(idOrFunc);\r\n\r\n                    if (\r\n                        unhandledTimerId === undefined ||\r\n                        unhandledTimerId !== timerId\r\n                    ) {\r\n                        throw new Error(\"The timer is in an undefined state.\");\r\n                    }\r\n                } else if (typeof idOrFunc !== \"undefined\") {\r\n                    idOrFunc();\r\n\r\n                    // A timeout can be safely deleted because it is only called once.\r\n                    scheduledTimeoutFunctions.delete(timerId);\r\n                } else {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n            } else if (Timeout.isClearResponse(data)) {\r\n                const { id } = data;\r\n\r\n                const unhandledTimerId = unhandledRequests.get(id);\r\n\r\n                if (unhandledTimerId === undefined) {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n\r\n                unhandledRequests.delete(id);\r\n\r\n                scheduledTimeoutFunctions.delete(unhandledTimerId);\r\n            } else {\r\n                const {\r\n                    error: { message }\r\n                } = data;\r\n\r\n                throw new Error(message);\r\n            }\r\n        });\r\n\r\n        const clearTimeout = (timerId: number) => {\r\n            const id = Math.random();\r\n\r\n            unhandledRequests.set(id, timerId);\r\n            scheduledTimeoutFunctions.set(timerId, id);\r\n\r\n            worker.postMessage({\r\n                id,\r\n                method: \"clear\",\r\n                params: { timerId }\r\n            } as IClearRequest);\r\n        };\r\n\r\n        const setTimeout = (func: () => void, delay: number) => {\r\n            const timerId = Math.random();\r\n\r\n            scheduledTimeoutFunctions.set(timerId, func);\r\n\r\n            worker.postMessage({\r\n                id: null,\r\n                method: \"set\",\r\n                params: {\r\n                    delay,\r\n                    now: performance.now(),\r\n                    timerId\r\n                }\r\n            } as ISetNotification);\r\n\r\n            return timerId;\r\n        };\r\n\r\n        return {\r\n            clearTimeout,\r\n            setTimeout\r\n        };\r\n    }\r\n\r\n    private static loadWorkerTimers = () => {\r\n        const worker = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=14)}([function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return i})),n.d(t,\"b\",(function(){return u})),n.d(t,\"c\",(function(){return a})),n.d(t,\"d\",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if(\"performance\"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o=\"performance\"in self?performance.now():Date.now();o>n?postMessage({id:null,method:\"call\",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){\"use strict\";n.r(t);var r=n(2);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)\"default\"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)\"default\"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)\"default\"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)\"default\"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(11);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(0),o=n(1);for(var i in o)\"default\"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)\"default\"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener(\"message\",({data:e})=>{try{if(\"clear\"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if(\"set\"!==e.method)throw new Error('The given method \"'.concat(e.method,'\" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`; // tslint:disable-line:max-line-length\r\n        return () => {\r\n            if (Timeout.workerTimers !== null) {\r\n                return Timeout.workerTimers;\r\n            }\r\n\r\n            const blob = new Blob([worker], { type: \"application/javascript; charset=utf-8\" });\r\n            const url = URL.createObjectURL(blob);\r\n\r\n            Timeout.workerTimers = Timeout.load(url);\r\n\r\n            // Edge doesn't like the URL to be revoked directly.\r\n            Timeout.workerTimers.setTimeout(() => URL.revokeObjectURL(url), 0);\r\n\r\n            return Timeout.workerTimers as IWorkerTimers;\r\n        };\r\n    }\r\n\r\n    public static timers: () => IWorkerTimers = Timeout.loadWorkerTimers();\r\n\r\n    private static isCallNotification = (message: TWorkerMessage): message is ICallNotification => {\r\n        return (message as ICallNotification).method !== undefined && (message as ICallNotification).method === \"call\";\r\n    }\r\n\r\n    private static isClearResponse = (message: TWorkerMessage): message is IClearResponse => {\r\n        return (message as IClearResponse).error === null && typeof message.id === \"number\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        if (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        }\r\n\r\n        this.connectionEvents.attach(async (connectionEvent: ConnectionEvent): Promise<void> => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    await this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = this.authentication;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => any = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            return this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = null;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const messageRetrievalPromise = this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string) => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            await this.audioSource.turnOff();\r\n            await this.sendFinalAudio();\r\n            await this.privRequestSession.onStopRecognizing();\r\n            await this.privRequestSession.turnCompletionPromise;\r\n            await this.privRequestSession.dispose();\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((connection: IConnection): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        try {\r\n            await (await this.privConnectionPromise).dispose();\r\n        } catch (error) {\r\n\r\n        }\r\n\r\n        this.privConnectionPromise = null;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public sendMessage(message: string): void { }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\r\n    public get activityTemplate(): string { return this.privActivityTemplate; }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privRequestSession.isRecognizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        // Only shrink the buffers for continuous recognition.\r\n                        // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\r\n                        if (this.privRecognizerConfig.isContinuousRecognition) {\r\n                            this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n                        }\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    protected sendSpeechContext = (connection: IConnection): Promise<void> => {\r\n        const speechContextJson = this.speechContext.toJSON();\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SessionId, undefined);\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo) => {\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, result, this.privConnectionId);\r\n\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent) => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                return Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n            }\r\n        }, async (error: string): Promise<IConnection> => {\r\n            await this.privRequestSession.onAuthCompleted(true, error);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        this.privConnectionPromise.catch(() => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    protected sendSpeechServiceConfig = (connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> => {\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry = JSON.parse(SpeechServiceConfigJson);\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch(() => {\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch(() => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void) => {\r\n            this.privSetTimeout(resolve, delayMs);\r\n        });\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += buffer.byteLength + \"\\r\\n\";\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n            }\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection);\r\n        return connection;\r\n    }\r\n}\r\n","import superPropBase from \"@babel/runtime/helpers/esm/superPropBase\";\nexport default function _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class SpeechSynthesisEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n\r\n    constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n}\r\n\r\nexport class SynthesisTriggeredEvent extends SpeechSynthesisEvent {\r\n    private privSessionAudioDestinationId: string;\r\n    private privTurnAudioDestinationId: string;\r\n\r\n    constructor(requestId: string, sessionAudioDestinationId: string, turnAudioDestinationId: string) {\r\n        super(\"SynthesisTriggeredEvent\", requestId);\r\n\r\n        this.privSessionAudioDestinationId = sessionAudioDestinationId;\r\n        this.privTurnAudioDestinationId = turnAudioDestinationId;\r\n    }\r\n\r\n    public get audioSessionDestinationId(): string {\r\n        return this.privSessionAudioDestinationId;\r\n    }\r\n\r\n    public get audioTurnDestinationId(): string {\r\n        return this.privTurnAudioDestinationId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"ConnectingToSynthesisServiceEvent\", requestId);\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport class SynthesisStartedEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"SynthesisStartedEvent\", requestId);\r\n\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events, IAudioDestination\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { ISynthesisMetadata } from \"./ServiceMessages/SynthesisAudioMetadata\";\r\nimport { SynthesisAdapterBase } from \"./SynthesisAdapterBase\";\r\nimport {\r\n    ConnectingToSynthesisServiceEvent,\r\n    SpeechSynthesisEvent,\r\n    SynthesisStartedEvent,\r\n    SynthesisTriggeredEvent,\r\n} from \"./SynthesisEvents\";\r\n\r\nexport interface ISynthesisResponseContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface ISynthesisResponseAudio {\r\n    type: string;\r\n    streamId: string;\r\n}\r\n\r\nexport interface ISynthesisResponse {\r\n    context: ISynthesisResponseContext;\r\n    audio: ISynthesisResponseAudio;\r\n}\r\n\r\nexport class SynthesisTurn {\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public set streamId(value: string) {\r\n        this.privStreamId = value;\r\n    }\r\n\r\n    public get audioOutputFormat(): AudioOutputFormatImpl {\r\n        return this.privAudioOutputFormat;\r\n    }\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSynthesisEnded(): boolean {\r\n        return this.privIsSynthesisEnded;\r\n    }\r\n\r\n    public get isSynthesizing(): boolean {\r\n        return this.privIsSynthesizing;\r\n    }\r\n\r\n    public get currentTextOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    // The number of bytes received for current turn\r\n    public get bytesReceived(): number {\r\n        return this.privBytesReceived;\r\n    }\r\n\r\n    private privIsDisposed: boolean = false;\r\n    private privAuthFetchEventId: string;\r\n    private privIsSynthesizing: boolean = false;\r\n    private privIsSynthesisEnded: boolean = false;\r\n    private privBytesReceived: number = 0;\r\n    private privRequestId: string;\r\n    private privStreamId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privReceivedAudio: ArrayBuffer;\r\n    private privReceivedAudioWithHeader: ArrayBuffer;\r\n    private privTextOffset: number = 0;\r\n    private privNextSearchTextIndex: number = 0;\r\n    private privPartialVisemeAnimation: string;\r\n    private privRawText: string;\r\n    private privIsSSML: boolean;\r\n    private privTurnAudioDestination: IAudioDestination;\r\n\r\n    constructor() {\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public async getAllReceivedAudio(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudio) {\r\n            return Promise.resolve(this.privReceivedAudio);\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        await this.readAllAudioFromStream();\r\n        return Promise.resolve(this.privReceivedAudio);\r\n    }\r\n\r\n    public async getAllReceivedAudioWithHeader(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudioWithHeader) {\r\n            return this.privReceivedAudioWithHeader;\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        if (this.audioOutputFormat.hasHeader) {\r\n            const audio: ArrayBuffer = await this.getAllReceivedAudio();\r\n            this.privReceivedAudioWithHeader = SynthesisAdapterBase.addHeader(audio, this.audioOutputFormat);\r\n            return this.privReceivedAudioWithHeader;\r\n        } else {\r\n            return this.getAllReceivedAudio();\r\n        }\r\n    }\r\n\r\n    public startNewSynthesis(requestId: string, rawText: string, isSSML: boolean, audioDestination?: IAudioDestination): void {\r\n        this.privIsSynthesisEnded = false;\r\n        this.privIsSynthesizing = true;\r\n        this.privRequestId = requestId;\r\n        this.privRawText = rawText;\r\n        this.privIsSSML = isSSML;\r\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\r\n        this.privReceivedAudio = null;\r\n        this.privReceivedAudioWithHeader = null;\r\n        this.privBytesReceived = 0;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        if (audioDestination !== undefined) {\r\n            this.privTurnAudioDestination = audioDestination;\r\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\r\n        }\r\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\r\n    }\r\n\r\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\r\n    }\r\n\r\n    public onAuthCompleted = (isError: boolean, error?: string): void => {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\r\n            this.privBytesReceived = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceResponseMessage = (responseJson: string): void => {\r\n        const response: ISynthesisResponse = JSON.parse(responseJson);\r\n        this.streamId = response.audio.streamId;\r\n    }\r\n\r\n    public onServiceTurnEndResponse = (): void => {\r\n        this.privInTurn = false;\r\n        this.privTurnDeferral.resolve();\r\n        this.onComplete();\r\n    }\r\n\r\n    public onServiceTurnStartResponse = (): void => {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onAudioChunkReceived(data: ArrayBuffer): void {\r\n        if (this.isSynthesizing) {\r\n            this.privAudioOutputStream.write(data);\r\n            this.privBytesReceived += data.byteLength;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.write(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onWordBoundaryEvent(text: string): void {\r\n        this.updateTextOffset(text);\r\n    }\r\n\r\n    public onVisemeMetadataReceived(metadata: ISynthesisMetadata): void {\r\n        if (metadata.Data.AnimationChunk !== undefined) {\r\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\r\n        }\r\n    }\r\n\r\n    public dispose = (error?: string): void => {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n        }\r\n    }\r\n\r\n    public onStopSynthesizing(): void {\r\n        this.onComplete();\r\n    }\r\n\r\n    /**\r\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\r\n     * partial animation.\r\n     */\r\n    public getAndClearVisemeAnimation(): string {\r\n        const animation: string = this.privPartialVisemeAnimation;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        return animation;\r\n    }\r\n\r\n    protected onEvent = (event: SpeechSynthesisEvent): void => {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private updateTextOffset(text: string): void {\r\n        if (this.privTextOffset >= 0) {\r\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\r\n            if (this.privTextOffset >= 0) {\r\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\r\n            }\r\n            if (this.privIsSSML) {\r\n                if (this.privRawText.indexOf(\"<\", this.privTextOffset + 1) > this.privRawText.indexOf(\">\", this.privTextOffset + 1)) {\r\n                    this.updateTextOffset(text);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete = (): void => {\r\n        if (this.privIsSynthesizing) {\r\n            this.privIsSynthesizing = false;\r\n            this.privIsSynthesisEnded = true;\r\n            this.privAudioOutputStream.close();\r\n            this.privInTurn = false;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.close();\r\n                this.privTurnAudioDestination = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async readAllAudioFromStream(): Promise<void> {\r\n        if (this.privIsSynthesisEnded) {\r\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\r\n            try {\r\n                await this.privAudioOutputStream.read(this.privReceivedAudio);\r\n            } catch (e) {\r\n                this.privReceivedAudio = new ArrayBuffer(0);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent = (e: PlatformEvent): void => {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n\r\n                this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry = (): string => {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose = (): void => {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError = (statusCode: number): string => {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\r\n\r\nexport class RequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privServiceTelemetryListener: ServiceTelemetryListener;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAudioNode: ReplayableAudioNode;\r\n    private privAuthFetchEventId: string;\r\n    private privIsAudioNodeDetached: boolean = false;\r\n    private privIsRecognizing: boolean = false;\r\n    private privIsSpeechEnded: boolean = false;\r\n    private privTurnStartAudioOffset: number = 0;\r\n    private privLastRecoOffset: number = 0;\r\n    private privHypothesisReceived: boolean = false;\r\n    private privBytesSent: number = 0;\r\n    private privRecogNumber: number = 0;\r\n    private privSessionId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n\r\n    constructor(audioSourceId: string) {\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSpeechEnded(): boolean {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n\r\n    public get isRecognizing(): boolean {\r\n        return this.privIsRecognizing;\r\n    }\r\n\r\n    public get currentTurnAudioOffset(): number {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n\r\n    public get recogNumber(): number {\r\n        return this.privRecogNumber;\r\n    }\r\n\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    public get bytesSent(): number {\r\n        return this.privBytesSent;\r\n    }\r\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n\r\n    public startNewRecognition(): void {\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n\r\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean, error?: string): Promise<void> {\r\n        this.privAudioNode = audioNode;\r\n        this.privIsAudioNodeDetached = false;\r\n\r\n        if (isError) {\r\n            await this.onComplete();\r\n        } else {\r\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n        }\r\n    }\r\n\r\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n\r\n    public async onAuthCompleted(isError: boolean, error?: string): Promise<void> {\r\n        if (isError) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n            if (!!this.privAudioNode) {\r\n                this.privAudioNode.replay();\r\n            }\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privBytesSent = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\r\n        this.privTurnDeferral.resolve();\r\n\r\n        if (!continuousRecognition || this.isSpeechEnded) {\r\n            await this.onComplete();\r\n            this.privInTurn = false;\r\n        } else {\r\n            // Start a new request set.\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privRequestId = createNoDashGuid();\r\n            this.privAudioNode.replay();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnStartResponse = (): void => {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n        }\r\n\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onHypothesis(offset: number): void {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n\r\n    public onPhraseRecognized(offset: number): void {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n\r\n    public onServiceRecognized(offset: number): void {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n    }\r\n\r\n    public onAudioSent(bytesSent: number): void {\r\n        this.privBytesSent += bytesSent;\r\n    }\r\n\r\n    public async dispose(error?: string): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            this.privServiceTelemetryListener.dispose();\r\n            this.privIsRecognizing = false;\r\n        }\r\n    }\r\n\r\n    public getTelemetry = (): string => {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async onStopRecognizing(): Promise<void> {\r\n        await this.onComplete();\r\n    }\r\n\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    public onSpeechEnded(): void {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n\r\n    protected onEvent = (event: SpeechRecognitionEvent): void => {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private async onComplete(): Promise<void> {\r\n        if (!!this.privIsRecognizing) {\r\n            this.privIsRecognizing = false;\r\n            await this.detachAudioNode();\r\n        }\r\n    }\r\n\r\n    private async detachAudioNode(): Promise<void> {\r\n        if (!this.privIsAudioNodeDetached) {\r\n            this.privIsAudioNodeDetached = true;\r\n            if (this.privAudioNode) {\r\n                await this.privAudioNode.detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct\");\n\nvar possibleConstructorReturn = require(\"./possibleConstructorReturn\");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}\n\nmodule.exports = _createSuper;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct;","var _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { ArgumentNullError } from \"./Error\";\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    }\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    }\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    }\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    }\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    }\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve = (result: T): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject = (error: string): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void => {\r\n\r\n        if (successCallback == null) {\r\n            successCallback = (r: T) => { return; };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers = (): void => {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error as Error;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error);\r\n                    }\r\n                    /* tslint:disable:no-empty */\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent = (event: TEvent): void => {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: () => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener = (listener: IEventListener<TEvent>): IDetachable => {\r\n        return this.attach(listener.onEvent);\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose = (): void => {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { createNoDashGuid } from \"../../common/Guid\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     *        PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     *        the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     *        push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.attach(\"id\").then<Blob | Buffer>((audioNode: IAudioStreamNode) => {\r\n            const data: ArrayBuffer[] = [];\r\n            let bufferData = Buffer.from(\"\");\r\n            const readCycle = (): Promise<Blob | Buffer> => {\r\n                return audioNode.read().then<Blob | Buffer>((audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                    if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                        if (typeof (XMLHttpRequest) !== \"undefined\" && typeof (Blob) !== \"undefined\") {\r\n                            return Promise.resolve(new Blob(data));\r\n                        } else {\r\n                            return Promise.resolve(Buffer.from(bufferData));\r\n                        }\r\n                    } else {\r\n                        if (typeof (Blob) !== \"undefined\") {\r\n                            data.push(audioStreamChunk.buffer);\r\n                        } else {\r\n                            bufferData = Buffer.concat([bufferData, this.toBuffer(audioStreamChunk.buffer)]);\r\n                        }\r\n                        return readCycle();\r\n                    }\r\n                });\r\n            };\r\n            return readCycle();\r\n        });\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async () => {\r\n                stream.readEnded();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: () => {\r\n                return audioNodeId;\r\n            },\r\n            read: () => {\r\n                return stream.read();\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     *        derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     *        derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return Promise.reject(\"Not implemented\");\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: () => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: () => {\r\n                return audioNodeId;\r\n            },\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define speech synthesis audio output formats.\r\n * @enum SpeechSynthesisOutputFormat\r\n * Updated in version 1.16.0\r\n */\r\nexport enum SpeechSynthesisOutputFormat {\r\n    /**\r\n     * raw-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,\r\n     */\r\n    Raw8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * riff-16khz-16kbps-mono-siren\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren\r\n     */\r\n    Riff16Khz16KbpsMonoSiren ,\r\n\r\n    /**\r\n     * audio-16khz-16kbps-mono-siren\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren\r\n     */\r\n    Audio16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-32kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3\r\n     */\r\n    Audio16Khz32KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-128kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3\r\n     */\r\n    Audio16Khz128KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-64kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3\r\n     */\r\n    Audio16Khz64KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-48kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3\r\n     */\r\n    Audio24Khz48KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3\r\n     */\r\n    Audio24Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-160kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\r\n     */\r\n    Audio24Khz160KBitRateMonoMp3,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-truesilk\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk\r\n     */\r\n    Raw16Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * riff-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm\r\n     */\r\n    Riff16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm\r\n     */\r\n    Riff8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n     */\r\n    Riff24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw\r\n     */\r\n    Riff8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm\r\n     */\r\n    Raw16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm\r\n     */\r\n    Raw24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm\r\n     */\r\n    Raw8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * ogg-16khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus\r\n     */\r\n    Ogg16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * ogg-24khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus\r\n     */\r\n    Ogg24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm\r\n     */\r\n    Raw48Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm\r\n     */\r\n\r\n    Riff48Khz16BitMonoPcm,\r\n    /**\r\n     * audio-48khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3\r\n     */\r\n    Audio48Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-48khz-192kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3\r\n     */\r\n    Audio48Khz192KBitRateMonoMp3,\r\n\r\n    /**\r\n     * ogg-48khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus\r\n     */\r\n    Ogg48Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-16khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus\r\n     */\r\n    Webm16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-24khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus\r\n     */\r\n    Webm24Khz16BitMonoOpus,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as http from \"http\";\r\nimport * as tls from \"tls\";\r\nimport * as parse from \"url-parse\";\r\nimport * as ocsp from \"../../external/ocsp/ocsp\";\r\nimport {\r\n    Events,\r\n    OCSPCacheEntryExpiredEvent,\r\n    OCSPCacheEntryNeedsRefreshEvent,\r\n    OCSPCacheFetchErrorEvent,\r\n    OCSPCacheHitEvent,\r\n    OCSPCacheMissEvent,\r\n    OCSPCacheUpdatehCompleteEvent,\r\n    OCSPCacheUpdateNeededEvent,\r\n    OCSPDiskCacheHitEvent,\r\n    OCSPDiskCacheStoreEvent,\r\n    OCSPEvent,\r\n    OCSPMemoryCacheHitEvent,\r\n    OCSPMemoryCacheStoreEvent,\r\n    OCSPResponseRetrievedEvent,\r\n    OCSPStapleReceivedEvent,\r\n    OCSPVerificationFailedEvent,\r\n} from \"../common/Exports\";\r\nimport { IStringDictionary } from \"../common/IDictionary\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\nimport Agent from \"agent-base\";\r\n\r\n// @ts-ignore\r\nimport Cache from \"async-disk-cache\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\nimport * as net from \"net\";\r\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\r\n\r\nexport class CertCheckAgent {\r\n\r\n    // Test hook to enable forcing expiration / refresh to happen.\r\n    public static testTimeOffset: number = 0;\r\n\r\n    // Test hook to disable stapling for cache testing.\r\n    public static forceDisableOCSPStapling: boolean = false;\r\n\r\n    // An in memory cache for recived responses.\r\n    private static privMemCache: IStringDictionary<Buffer> = {};\r\n\r\n    // The on disk cache.\r\n    private static privDiskCache: Cache;\r\n\r\n    private privProxyInfo: ProxyInfo;\r\n\r\n    constructor(proxyInfo?: ProxyInfo) {\r\n        if (!!proxyInfo) {\r\n            this.privProxyInfo = proxyInfo;\r\n        }\r\n\r\n        // Initialize this here to allow tests to set the env variable before the cache is constructed.\r\n        if (!CertCheckAgent.privDiskCache) {\r\n            CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", { supportBuffer: true, location: (typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT) ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined });\r\n        }\r\n    }\r\n\r\n    // Test hook to force the disk cache to be recreated.\r\n    public static forceReinitDiskCache(): void {\r\n        CertCheckAgent.privDiskCache = undefined;\r\n        CertCheckAgent.privMemCache = {};\r\n    }\r\n\r\n    public GetAgent(disableStapling?: boolean): http.Agent {\r\n        const agent: any = new Agent.Agent(this.CreateConnection);\r\n\r\n        if (this.privProxyInfo !== undefined &&\r\n            this.privProxyInfo.HostName !== undefined &&\r\n            this.privProxyInfo.Port > 0) {\r\n            const proxyName: string = \"privProxyInfo\";\r\n            agent[proxyName] = this.privProxyInfo;\r\n        }\r\n\r\n        return agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private static async OCSPCheck(socketPromise: Promise<net.Socket>, proxyInfo: ProxyInfo): Promise<net.Socket> {\r\n        let ocspRequest: ocsp.Request;\r\n        let stapling: Buffer;\r\n        let resolved: boolean = false;\r\n\r\n        const socket: net.Socket = await socketPromise;\r\n        socket.cork();\r\n\r\n        const tlsSocket: tls.TLSSocket = socket as tls.TLSSocket;\r\n\r\n        return new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\r\n            socket.on(\"OCSPResponse\", (data: Buffer): void => {\r\n                if (!!data) {\r\n                    this.onEvent(new OCSPStapleReceivedEvent());\r\n                    stapling = data;\r\n                }\r\n            });\r\n\r\n            socket.on(\"error\", (error: Error) => {\r\n                if (!resolved) {\r\n                    resolved = true;\r\n                    socket.destroy();\r\n                    reject(error);\r\n                }\r\n            });\r\n\r\n            tlsSocket.on(\"secure\", async () => {\r\n                const peer: tls.DetailedPeerCertificate = tlsSocket.getPeerCertificate(true);\r\n                try {\r\n                    const issuer: tls.DetailedPeerCertificate = await this.GetIssuer(peer);\r\n\r\n                    // We always need a request to verify the response.\r\n                    ocspRequest = ocsp.request.generate(peer.raw, issuer.raw);\r\n\r\n                    // Do we have a result for this certificate in our memory cache?\r\n                    const sig: string = ocspRequest.id.toString(\"hex\");\r\n\r\n                    // Stapled response trumps cached response.\r\n                    if (!stapling) {\r\n                        const cacheEntry: Buffer = await CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\r\n                        stapling = cacheEntry;\r\n                    }\r\n\r\n                    await this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\r\n\r\n                    socket.uncork();\r\n                    resolved = true;\r\n                    resolve(socket);\r\n                } catch (e) {\r\n                    socket.destroy();\r\n                    resolved = true;\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static GetIssuer(peer: tls.DetailedPeerCertificate): Promise<tls.DetailedPeerCertificate> {\r\n        if (peer.issuerCertificate) {\r\n            return Promise.resolve(peer.issuerCertificate);\r\n        }\r\n\r\n        return new Promise<tls.DetailedPeerCertificate>((resolve: (value: tls.DetailedPeerCertificate) => void, reject: (reason: string) => void) => {\r\n            const ocspAgent: ocsp.Agent = new ocsp.Agent({});\r\n            ocspAgent.fetchIssuer(peer, null, (error: string, value: tls.DetailedPeerCertificate): void => {\r\n                if (!!error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                resolve(value);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async GetResponseFromCache(signature: string, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n        let cachedResponse: Buffer = CertCheckAgent.privMemCache[signature];\r\n\r\n        if (!!cachedResponse) {\r\n            this.onEvent(new OCSPMemoryCacheHitEvent(signature));\r\n        }\r\n\r\n        // Do we have a result for this certificate on disk in %TMP%?\r\n        if (!cachedResponse) {\r\n            try {\r\n                const diskCacheResponse: any = await CertCheckAgent.privDiskCache.get(signature);\r\n                if (!!diskCacheResponse.isCached) {\r\n                    CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\r\n                    CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\r\n                    cachedResponse = diskCacheResponse.value;\r\n                }\r\n            } catch (error) {\r\n                cachedResponse = null;\r\n            }\r\n        }\r\n\r\n        if (!cachedResponse) {\r\n            return cachedResponse;\r\n        }\r\n\r\n        try {\r\n            const cachedOcspResponse: ocsp.Response = ocsp.utils.parseResponse(cachedResponse);\r\n            const tbsData = cachedOcspResponse.value.tbsResponseData;\r\n            if (tbsData.responses.length < 1) {\r\n                this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\r\n                return;\r\n            }\r\n\r\n            const cachedStartTime: number = tbsData.responses[0].thisUpdate;\r\n            const cachedNextTime: number = tbsData.responses[0].nextUpdate;\r\n\r\n            if (cachedNextTime < (Date.now() + this.testTimeOffset - 60000)) {\r\n                // Cached entry has expired.\r\n                this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\r\n                cachedResponse = null;\r\n            } else {\r\n                // If we're within one day of the next update, or 50% of the way through the validity period,\r\n                // background an update to the cache.\r\n\r\n                const minUpdate: number = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\r\n\r\n                if ((cachedNextTime - (Date.now() + this.testTimeOffset)) < minUpdate) {\r\n                    this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\r\n                    this.UpdateCache(ocspRequest, proxyInfo).catch((error: string) => {\r\n                        // Well, not much we can do here.\r\n                        this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\r\n                    });\r\n                } else {\r\n                    this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.onEvent(new OCSPCacheFetchErrorEvent(signature, error));\r\n            cachedResponse = null;\r\n        }\r\n        if (!cachedResponse) {\r\n            this.onEvent(new OCSPCacheMissEvent(signature));\r\n        }\r\n        return cachedResponse;\r\n    }\r\n\r\n    private static async VerifyOCSPResponse(cacheValue: Buffer, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        let ocspResponse: Buffer = cacheValue;\r\n        const sig: string = ocspRequest.certID.toString(\"hex\");\r\n\r\n        // Do we have a valid response?\r\n        if (!ocspResponse) {\r\n            ocspResponse = await CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\r\n        }\r\n\r\n        return new Promise<void>((resolve: () => void, reject: (error: string | Error) => void) => {\r\n            ocsp.verify({ request: ocspRequest, response: ocspResponse }, (error: string, result: any): void => {\r\n                if (!!error) {\r\n                    CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error));\r\n\r\n                    // Bad Cached Value? One more try without the cache.\r\n                    if (!!cacheValue) {\r\n                        this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(() => {\r\n                            resolve();\r\n                        }, (error: Error) => {\r\n                            reject(error);\r\n                        });\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                } else {\r\n                    if (!cacheValue) {\r\n                        CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async UpdateCache(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        const signature: string = req.id.toString(\"hex\");\r\n        this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\r\n\r\n        const rawResponse: Buffer = await this.GetOCSPResponse(req, proxyInfo);\r\n        this.StoreCacheEntry(signature, rawResponse);\r\n        this.onEvent(new OCSPCacheUpdatehCompleteEvent(req.id.toString(\"hex\")));\r\n\r\n    }\r\n\r\n    private static StoreCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.StoreMemoryCacheEntry(sig, rawResponse);\r\n        this.StoreDiskCacheEntry(sig, rawResponse);\r\n    }\r\n\r\n    private static StoreMemoryCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privMemCache[sig] = rawResponse;\r\n        this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\r\n    }\r\n\r\n    private static StoreDiskCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privDiskCache.set(sig, rawResponse).then(() => {\r\n            this.onEvent(new OCSPDiskCacheStoreEvent(sig));\r\n        });\r\n    }\r\n\r\n    private static GetOCSPResponse(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n\r\n        const ocspMethod: string = \"1.3.6.1.5.5.7.48.1\";\r\n        let options: http.RequestOptions = {};\r\n\r\n        if (!!proxyInfo) {\r\n            const agent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(proxyInfo);\r\n            options.agent = agent;\r\n        }\r\n\r\n        return new Promise<Buffer>((resolve: (value: Buffer) => void, reject: (error: string | Error) => void) => {\r\n            ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, (error: string, uri: string): void => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                const parsedUri: {[k: string]: any} = parse.default(uri);\r\n                parsedUri.path = parsedUri.pathname;\r\n                options = { ...options, ...parsedUri };\r\n\r\n                ocsp.utils.getResponse(options, req.data, (error: string, raw: Buffer): void => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    this.onEvent(new OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\r\n                    resolve(raw);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private static onEvent = (event: OCSPEvent): void => {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private CreateConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        const enableOCSP: boolean = (typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\") && options.secureEndpoint;\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.privProxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket) => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        if (!!enableOCSP) {\r\n            return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\r\n        } else {\r\n            return socketPromise;\r\n        }\r\n    }\r\n}\r\n","'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:[\\\\/]+/\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?([\\\\/]{1,})?([\\S\\s]*)/i\n  , whitespace = '[\\\\x09\\\\x0A\\\\x0B\\\\x0C\\\\x0D\\\\x20\\\\xA0\\\\u1680\\\\u180E\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200A\\\\u202F\\\\u205F\\\\u3000\\\\u2028\\\\u2029\\\\uFEFF]'\n  , left = new RegExp('^'+ whitespace +'+');\n\n/**\n * Trim a given string.\n *\n * @param {String} str String to trim.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(left, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address) {          // Sanitize what is left of the address\n    return address.replace('\\\\', '/');\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address) {\n  address = trimLeft(address);\n\n  var match = protocolre.exec(address)\n    , protocol = match[1] ? match[1].toLowerCase() : ''\n    , slashes = !!(match[2] && match[2].length >= 2)\n    , rest =  match[2] && match[2].length === 1 ? '/' + match[3] : match[3];\n\n  return {\n    protocol: protocol,\n    slashes: slashes,\n    rest: rest\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && url.hostname) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n","'use strict';\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , undef;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input.replace(/\\+/g, ' '));\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */\nfunction encode(input) {\n  try {\n    return encodeURIComponent(input);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?#&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    // In the case if failed decoding, we want to omit the key/value pairs\n    // from the result.\n    //\n    if (key === null || value === null || key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = []\n    , value\n    , key;\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key];\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      key = encode(key);\n      value = encode(value);\n\n      //\n      // If we failed to encode the strings, we should bail out as we don't\n      // want to add invalid strings to the query.\n      //\n      if (key === null || value === null) continue;\n      pairs.push(key +'='+ value);\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class OCSPEvent extends PlatformEvent {\r\n    private privSignature: string;\r\n\r\n    constructor(eventName: string, eventType: EventType, signature: string) {\r\n        super(eventName, eventType);\r\n\r\n        this.privSignature = signature;\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheHitEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheMissEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPCacheMissEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheHitEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPDiskCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateNeededEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateNeededEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheStoreEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheStoreEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPDiskCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdatehCompleteEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPCacheUpdatehCompleteEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPStapleReceivedEvent extends OCSPEvent {\r\n    constructor() {\r\n        super(\"OCSPStapleReceivedEvent\", EventType.Debug, \"\");\r\n    }\r\n}\r\n\r\nexport class OCSPWSUpgradeStartedEvent extends OCSPEvent {\r\n    constructor(serialNumber: string) {\r\n        super(\"OCSPWSUpgradeStartedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryExpiredEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n\r\n    constructor(serialNumber: string, expireTime: number) {\r\n        super(\"OCSPCacheEntryExpiredEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryNeedsRefreshEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n\r\n    constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheEntryNeedsRefreshEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privStartTime = startTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheHitEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n    private privExpireTimeString: string;\r\n    private privStartTimeString: string;\r\n\r\n    constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheHitEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privExpireTimeString = new Date(expireTime).toLocaleDateString();\r\n        this.privStartTime = startTime;\r\n        this.privStartTimeString = new Date(startTime).toLocaleTimeString();\r\n    }\r\n}\r\n\r\nexport class OCSPVerificationFailedEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPVerificationFailedEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheFetchErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheFetchErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPResponseRetrievedEvent extends OCSPEvent {\r\n    constructor(serialNumber: string) {\r\n        super(\"OCSPResponseRetrievedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheUpdateErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { List } from \"./List\";\r\nimport {\r\n    Deferred,\r\n} from \"./Promise\";\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    enqueue(item: TItem): void;\r\n    enqueueFromPromise(promise: Promise<TItem>): void;\r\n    dequeue(): Promise<TItem>;\r\n    peek(): Promise<TItem>;\r\n    length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private privList: List<TItem>;\r\n    private privDetachables: IDetachable[];\r\n    private privSubscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\r\n    private privIsDrainInProgress: boolean = false;\r\n    private privIsDisposing: boolean = false;\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.privList = list ? list : new List<TItem>();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\r\n        this.privDetachables.push(this.privList.onAdded(this.drain));\r\n    }\r\n\r\n    public enqueue = (item: TItem): void => {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(new Promise<TItem>((resolve: (value: TItem) => void, reject: (reason: any) => void) => { resolve(item); }));\r\n    }\r\n\r\n    public enqueueFromPromise = (promise: Promise<TItem>): void => {\r\n        this.throwIfDispose();\r\n        promise.then((val: TItem): void => {\r\n            this.privList.add(val);\r\n             /* tslint:disable:no-empty */\r\n        }, (error: string): void => { });\r\n    }\r\n\r\n    public dequeue = (): Promise<TItem> => {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public peek = (): Promise<TItem> => {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public length = (): number => {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privSubscribers == null;\r\n    }\r\n\r\n    public async drainAndDispose(pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<void> {\r\n        if (!this.isDisposed() && !this.privIsDisposing) {\r\n            this.privDisposeReason = reason;\r\n            this.privIsDisposing = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            if (subs) {\r\n                while (subs.length() > 0) {\r\n                    const subscriber = subs.removeFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.resolve(undefined);\r\n                    // subscriber.deferral.reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                const promiseArray: Promise<TItem>[] = [];\r\n\r\n                this.privPromiseStore.toArray().forEach((wrapper: Promise<TItem>) => {\r\n                    promiseArray.push(wrapper);\r\n                });\r\n                return Promise.all(promiseArray).finally(() => {\r\n                    this.privSubscribers = null;\r\n                    this.privList.forEach((item: TItem, index: number): void => {\r\n                        pendingItemProcessor(item);\r\n                    });\r\n                    this.privList = null;\r\n                    return;\r\n                }).then<void>();\r\n            } else {\r\n                this.privSubscribers = null;\r\n                this.privList = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        await this.drainAndDispose(null, reason);\r\n    }\r\n\r\n    private drain = (): void => {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    } else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private throwIfDispose = (): void => {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get = (itemIndex: number): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first = (): TItem => {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last = (): TItem => {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add = (item: TItem): void => {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt = (index: number, item: TItem): void => {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst = (): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast = (): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt = (index: number): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove = (index: number, count: number): TItem[] => {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear = (): void => {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length = (): number => {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded = (addedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved = (removedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed = (disposedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join = (seperator?: string): string => {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray = (): TItem[] => {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem) => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any = (callback?: (item: TItem, index: number) => boolean): boolean => {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all = (callback: (item: TItem) => boolean): boolean => {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach = (callback: (item: TItem, index: number) => void): void => {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem) => compareFn(b, a));\r\n    }\r\n\r\n    public clone = (): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat = (list: List<TItem>): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray = (array: TItem[]): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose = (reason?: string): void => {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed = (): void => {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    /* tslint:disable:member-ordering */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuthFromProperties(this.privProperties),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        return authentication;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private privAudioSourceId: string;\r\n\r\n    constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privAudioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n}\r\n\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private privError: string;\r\n\r\n    constructor(audioSourceId: string, error: string) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private privAudioNodeId: string;\r\n\r\n    constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\r\n        super(eventName, audioSourceId);\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private privError: string;\r\n\r\n    constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStreamChunk, Stream } from \"./Exports\";\r\n\r\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\r\n    private privTargetChunkSize: number;\r\n    private privNextBufferToWrite: ArrayBuffer;\r\n    private privNextBufferStartTime: number;\r\n    private privNextBufferReadyBytes: number;\r\n\r\n    constructor(targetChunkSize: number, streamId?: string) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = targetChunkSize;\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n\r\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n\r\n        let bytesCopiedFromBuffer: number = 0;\r\n\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n\r\n        super.close();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { Queue } from \"./Queue\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privIsWriteEnded: boolean = false;\r\n    private privIsReadEnded: boolean = false;\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsWriteEnded;\r\n    }\r\n\r\n    public get isReadEnded(): boolean {\r\n        return this.privIsReadEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    public read = (): Promise<IStreamChunk<TBuffer>> => {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .then(async (streamChunk: IStreamChunk<TBuffer>) => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    await this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n    public readEnded = (): void => {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        }\r\n    }\r\n\r\n    private throwIfClosed = (): void => {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"./Error\";\r\nimport { EventSource } from \"./EventSource\";\r\nimport { IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class Events {\r\n    private static privInstance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static setEventSource = (eventSource: IEventSource<PlatformEvent>): void => {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.privInstance = eventSource;\r\n    }\r\n\r\n    public static get instance(): IEventSource<PlatformEvent> {\r\n        return Events.privInstance;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport enum PropertyId {\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to specify\r\n     * to specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]].\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    SpeechServiceConnection_Key = 0,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromEndpoint]].\r\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    SpeechServiceConnection_Endpoint,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\r\n     * use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    SpeechServiceConnection_Region,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],\r\n     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    SpeechServiceAuthorization_Token,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization type. Currently unused.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    SpeechServiceAuthorization_Type,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.endpointId]].\r\n     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    SpeechServiceConnection_EndpointId,\r\n\r\n    /**\r\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],\r\n     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    SpeechServiceConnection_TranslationToLanguages,\r\n\r\n    /**\r\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead, use [[SpeechTranslationConfig.voiceName]].\r\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    SpeechServiceConnection_TranslationVoice,\r\n\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    SpeechServiceConnection_TranslationFeatures,\r\n\r\n    /**\r\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[LanguageUnderstandingModel]].\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    SpeechServiceConnection_IntentRegion,\r\n\r\n    /**\r\n     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyHostName,\r\n\r\n    /**\r\n     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPort,\r\n\r\n    /**\r\n     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyUserName,\r\n\r\n    /**\r\n     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPassword,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    SpeechServiceConnection_RecoMode,\r\n\r\n    /**\r\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\r\n     * directly.\r\n     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    SpeechServiceConnection_RecoLanguage,\r\n\r\n    /**\r\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\r\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead use [[SessionEventArgs.sessionId]].\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    Speech_SessionId,\r\n\r\n    /**\r\n     * The spoken language to be synthesized (e.g. en-US)\r\n     * @member PropertyId.SpeechServiceConnection_SynthLanguage\r\n     */\r\n    SpeechServiceConnection_SynthLanguage,\r\n\r\n    /**\r\n     * The name of the TTS voice to be used for speech synthesis\r\n     * @member PropertyId.SpeechServiceConnection_SynthVoice\r\n     */\r\n    SpeechServiceConnection_SynthVoice,\r\n\r\n    /**\r\n     * The string to specify TTS output audio format\r\n     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat\r\n     */\r\n    SpeechServiceConnection_SynthOutputFormat,\r\n\r\n    /**\r\n     * The list of comma separated languages used as possible source languages\r\n     * Added in version 1.13.0\r\n     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages\r\n     */\r\n    SpeechServiceConnection_AutoDetectSourceLanguages,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\r\n     * to use this property directly.\r\n     * Instead use [[SpeechConfig.outputFormat]].\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    SpeechServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\r\n     * use this property directly. Instead use [[CancellationDetails.errorDetails]].\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    SpeechServiceResponse_JsonErrorDetails,\r\n\r\n    /**\r\n     * The cancellation reason. Currently unused.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    CancellationDetails_Reason,\r\n\r\n    /**\r\n     * The cancellation text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    CancellationDetails_ReasonText,\r\n\r\n    /**\r\n     * The Cancellation detailed text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    CancellationDetails_ReasonDetailedText,\r\n\r\n    /**\r\n     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    LanguageUnderstandingServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The URL string built from speech configuration.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * NOTE: Added in version 1.7.0.\r\n     */\r\n    SpeechServiceConnection_Url,\r\n\r\n    /**\r\n     * The initial silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n\r\n    /**\r\n     * The end silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EndSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A boolean value specifying whether audio logging is enabled in the service or not.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EnableAudioLogging,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity setting.\r\n     * Allowed values are \"masked\", \"removed\", and \"raw\".\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_ProfanityOption,\r\n\r\n    /**\r\n     * A string value specifying which post processing option should be used by service.\r\n     * Allowed values are \"TrueText\".\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_PostProcessingOption,\r\n\r\n    /**\r\n     *  A boolean value specifying whether to include word-level timestamps in the response result.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_RequestWordLevelTimestamps,\r\n\r\n    /**\r\n     * The number of times a word has to be in partial results to be returned.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_StablePartialResultThreshold,\r\n\r\n    /**\r\n     * A string value specifying the output format option in the response result. Internal use only.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_OutputFormatOption,\r\n\r\n    /**\r\n     * A boolean value to request for stabilizing translation partial results by omitting words in the end.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n\r\n    /**\r\n     * Identifier used to connect to the backend service.\r\n     * @member PropertyId.Conversation_ApplicationId\r\n     */\r\n    Conversation_ApplicationId,\r\n\r\n    /**\r\n     * Type of dialog backend to connect to.\r\n     * @member PropertyId.Conversation_DialogType\r\n     */\r\n    Conversation_DialogType,\r\n\r\n    /**\r\n     * Silence timeout for listening\r\n     * @member PropertyId.Conversation_Initial_Silence_Timeout\r\n     */\r\n    Conversation_Initial_Silence_Timeout,\r\n\r\n    /**\r\n     * From Id to add to speech recognition activities.\r\n     * @member PropertyId.Conversation_From_Id\r\n     */\r\n    Conversation_From_Id,\r\n\r\n    /**\r\n     * ConversationId for the session.\r\n     * @member PropertyId.Conversation_Conversation_Id\r\n     */\r\n    Conversation_Conversation_Id,\r\n\r\n    /**\r\n     * Comma separated list of custom voice deployment ids.\r\n     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids\r\n     */\r\n    Conversation_Custom_Voice_Deployment_Ids,\r\n\r\n    /**\r\n     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.\r\n     * @member PropertyId.Conversation_Speech_Activity_Template\r\n     * Added in version 1.10.0.\r\n     */\r\n    Conversation_Speech_Activity_Template,\r\n\r\n    /**\r\n     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.\r\n     * @member PropertyId.Conversation_Request_Bot_Status_Messages\r\n     * Added in version 1.15.0.\r\n     */\r\n    Conversation_Request_Bot_Status_Messages,\r\n\r\n    /**\r\n     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for\r\n     * channel authentication.\r\n     * Added in version 1.15.1.\r\n     */\r\n    Conversation_Agent_Connection_Id,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromHost]].\r\n     */\r\n    SpeechServiceConnection_Host,\r\n\r\n    /**\r\n     * Set the host for service calls to the Conversation Translator REST management and websocket calls.\r\n     */\r\n    ConversationTranslator_Host,\r\n\r\n    /**\r\n     * Optionally set the the host's display name.\r\n     * Used when joining a conversation.\r\n     */\r\n    ConversationTranslator_Name,\r\n\r\n    /**\r\n     * Optionally set a value for the X-CorrelationId request header.\r\n     * Used for troubleshooting errors in the server logs. It should be a valid guid.\r\n     */\r\n    ConversationTranslator_CorrelationId,\r\n\r\n    /**\r\n     * Set the conversation token to be sent to the speech service. This enables the\r\n     * service to service call from the speech service to the Conversation Translator service for relaying\r\n     * recognitions. For internal use.\r\n     */\r\n    ConversationTranslator_Token,\r\n\r\n    /**\r\n     * The reference text of the audio for pronunciation evaluation.\r\n     * For this and the following pronunciation assessment parameters, see\r\n     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_ReferenceText,\r\n\r\n    /**\r\n     * The point system for pronunciation score calibration (FivePoint or HundredMark).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_GradingSystem,\r\n\r\n    /**\r\n     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Granularity,\r\n\r\n    /**\r\n     * Defines if enable miscue calculation.\r\n     * With this enabled, the pronounced words will be compared to the reference text,\r\n     * and will be marked with omission/insertion based on the comparison. The default setting is False.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_EnableMiscue,\r\n\r\n    /**\r\n     * The json string of pronunciation assessment parameters\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Json,\r\n\r\n    /**\r\n     * Pronunciation assessment parameters.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Params\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport enum CancellationReason {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition.\r\n     * @member CancellationReason.Error\r\n     */\r\n    Error,\r\n\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    EndOfStream,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n *  Defines error code in case that CancellationReason is Error.\r\n *  Added in version 1.1.0.\r\n */\r\nexport enum CancellationErrorCode {\r\n    /**\r\n     * Indicates that no error occurred during speech recognition.\r\n     */\r\n    NoError,\r\n\r\n    /**\r\n     * Indicates an authentication error.\r\n     */\r\n    AuthenticationFailure,\r\n\r\n    /**\r\n     * Indicates that one or more recognition parameters are invalid.\r\n     */\r\n    BadRequestParameters,\r\n\r\n    /**\r\n     * Indicates that the number of parallel requests exceeded the number of allowed\r\n     * concurrent transcriptions for the subscription.\r\n     */\r\n    TooManyRequests,\r\n\r\n    /**\r\n     * Indicates a connection error.\r\n     */\r\n    ConnectionFailure,\r\n\r\n    /**\r\n     * Indicates a time-out error when waiting for response from service.\r\n     */\r\n    ServiceTimeout,\r\n\r\n    /**\r\n     * Indicates that an error is returned by the service.\r\n     */\r\n    ServiceError,\r\n\r\n    /**\r\n     * Indicates an unexpected runtime error.\r\n     */\r\n    RuntimeError,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport enum ResultReason {\r\n    /**\r\n     * Indicates speech could not be recognized. More details\r\n     * can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    NoMatch,\r\n\r\n    /**\r\n     * Indicates that the recognition was canceled. More details\r\n     * can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    Canceled,\r\n\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizingSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizedSpeech,\r\n\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    RecognizingIntent,\r\n\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    RecognizedIntent,\r\n\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    TranslatingSpeech,\r\n\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    TranslatedSpeech,\r\n\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    SynthesizingAudio,\r\n\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    SynthesizingAudioCompleted,\r\n\r\n    /**\r\n     * Indicates the speech synthesis is now started\r\n     * @member ResultReason.SynthesizingAudioStarted\r\n     */\r\n    SynthesizingAudioStarted,\r\n\r\n    /**\r\n     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.\r\n     * @member ResultReason.EnrollingVoiceProfile\r\n     */\r\n    EnrollingVoiceProfile,\r\n\r\n    /**\r\n     * Indicates the voice profile has been enrolled.\r\n     * @member ResultReason.EnrolledVoiceProfile\r\n     */\r\n    EnrolledVoiceProfile,\r\n\r\n    /**\r\n     * Indicates successful identification of some speakers.\r\n     * @member ResultReason.RecognizedSpeakers\r\n     */\r\n    RecognizedSpeakers,\r\n\r\n    /**\r\n     * Indicates successfully verified one speaker.\r\n     * @member ResultReason.RecognizedSpeaker\r\n     */\r\n    RecognizedSpeaker,\r\n\r\n    /**\r\n     * Indicates a voice profile has been reset successfully.\r\n     * @member ResultReason.ResetVoiceProfile\r\n     */\r\n    ResetVoiceProfile,\r\n\r\n    /**\r\n     * Indicates a voice profile has been deleted successfully.\r\n     * @member ResultReason.DeletedVoiceProfile\r\n     */\r\n    DeletedVoiceProfile,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter\r\n     *        is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection} The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId) => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class ServiceEvent extends PlatformEvent {\r\n    private privJsonResult: string;\r\n\r\n    constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\r\n      super(eventName, eventType);\r\n      this.privJsonResult = jsonstring;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n}\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private privConnectionId: string;\r\n\r\n    constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privConnectionId = connectionId;\r\n    }\r\n\r\n    public get connectionId(): string {\r\n        return this.privConnectionId;\r\n    }\r\n}\r\n\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private privUri: string;\r\n    private privHeaders: IStringDictionary<string>;\r\n\r\n    constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    constructor(connectionId: string, metadata?: IStringDictionary<string>) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private privReason: string;\r\n    private privStatusCode: number;\r\n\r\n    constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.privReason = reason;\r\n        this.privStatusCode = statusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionErrorEvent extends ConnectionEvent {\r\n    private readonly privMessage: string;\r\n    private readonly privType: string;\r\n\r\n    constructor(connectionId: string, message: string, type: string) {\r\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\r\n        this.privMessage = message;\r\n        this.privType = type;\r\n    }\r\n\r\n    public get message(): string {\r\n        return this.privMessage;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.privStatusCode = statuscode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private privNetworkReceivedTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkReceivedTime(): string {\r\n        return this.privNetworkReceivedTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private privNetworkSentTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.privNetworkSentTime = networkSentTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkSentTime(): string {\r\n        return this.privNetworkSentTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionEvent } from \"./ConnectionEvents\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse\";\r\nimport { EventSource } from \"./EventSource\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection {\r\n    id: string;\r\n    state(): ConnectionState;\r\n    open(): Promise<ConnectionOpenResponse>;\r\n    send(message: ConnectionMessage): Promise<void>;\r\n    read(): Promise<ConnectionMessage>;\r\n    events: EventSource<ConnectionEvent>;\r\n    dispose(disposing?: string): Promise<void>;\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    EventType,\r\n    PlatformEvent\r\n} from \"./Exports\";\r\n\r\nexport class BackgroundEvent extends PlatformEvent {\r\n    private privError: string;\r\n\r\n    constructor(error: string) {\r\n        super(\"BackgroundEvent\", EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    private privSessionId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    private privOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(offset: number, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport enum OutputFormat {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    Simple = 0,\r\n\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    Detailed,\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines channels used to pass property settings to service.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ServicePropertyChannel {\r\n    /**\r\n     * Uses URI query parameter to pass property settings to service.\r\n     */\r\n    UriQueryParameter = 0.\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     *       so it is suitable only for single shot recognition\r\n     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     *      Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     *        specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     *       Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && payload.__proto__.constructor.name !== \"ArrayBuffer\") {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode = (\r\n        actualAudioFrame: Float32Array): ArrayBuffer => {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString = (view: DataView, offset: number, str: string): void => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM = (view: DataView, offset: number, input: Float32Array): void => {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame = (\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array => {\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private privMediaResources: IMediaResources;\r\n    private privSpeechProcessorScript: string; // speech-processor.js Url\r\n\r\n    public record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\r\n        const desiredSampleRate = 16000;\r\n\r\n        const scriptNode = (() => {\r\n            let bufferSize = 0;\r\n            try {\r\n                return context.createScriptProcessor(bufferSize, 1, 1);\r\n            } catch (error) {\r\n                // Webkit (<= version 31) requires a valid bufferSize.\r\n                bufferSize = 2048;\r\n                let audioSampleRate = context.sampleRate;\r\n                while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                    bufferSize <<= 1;\r\n                    audioSampleRate >>= 1;\r\n                }\r\n                return context.createScriptProcessor(bufferSize, 1, 1);\r\n            }\r\n        })();\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n        let needHeader: boolean = true;\r\n        const that = this;\r\n        scriptNode.onaudioprocess = (event: AudioProcessingEvent) => {\r\n            const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n            if (outputStream && !outputStream.isClosed) {\r\n                const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                if (!!waveFrame) {\r\n                    outputStream.writeStreamChunk({\r\n                        buffer: waveFrame,\r\n                        isEnd: false,\r\n                        timeReceived: Date.now(),\r\n                    });\r\n                    needHeader = false;\r\n                }\r\n            }\r\n        };\r\n\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n\r\n        if (!!this.privSpeechProcessorScript && !!context.audioWorklet) {\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then(() => {\r\n                    const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n                    workletNode.port.onmessage = (ev: MessageEvent) => {\r\n                        const inputFrame: Float32Array = ev.data as Float32Array;\r\n\r\n                        if (outputStream && !outputStream.isClosed) {\r\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                            if (!!waveFrame) {\r\n                                outputStream.writeStreamChunk({\r\n                                    buffer: waveFrame,\r\n                                    isEnd: false,\r\n                                    timeReceived: Date.now(),\r\n                                });\r\n                                needHeader = false;\r\n                            }\r\n                        }\r\n                    };\r\n                    micInput.connect(workletNode);\r\n                    workletNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: workletNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                })\r\n                .catch(() => {\r\n                    micInput.connect(scriptNode);\r\n                    scriptNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: scriptNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                });\r\n        } else {\r\n            micInput.connect(scriptNode);\r\n            scriptNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: scriptNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        }\r\n    }\r\n\r\n    public releaseMediaResources = (context: AudioContext): void => {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                this.privMediaResources.stream.getTracks().forEach((track: any) => track.stop());\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setWorkletUrl(url: string): void {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\r\n    stream: MediaStream;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports\";\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigator extends Navigator {\r\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<void>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        private readonly deviceId?: string,\r\n        audioSourceId?: string,\r\n        mediaStream?: MediaStream\r\n        ) {\r\n\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privMediaStream = mediaStream || null;\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n\r\n    public get blob(): Promise<Blob> {\r\n        return Promise.reject(\"Not implemented for Mic input\");\r\n    }\r\n\r\n    public turnOn = (): Promise<void> => {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<void>();\r\n\r\n        try {\r\n            this.createAudioContext();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error as Error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            } else {\r\n                this.privInitializeDeferral.reject(error);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        const nav = window.navigator as INavigator;\r\n\r\n        let getUserMedia = (\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = () => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                } else {\r\n                    getUserMedia(\r\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                        (mediaStream: MediaStream) => {\r\n                            this.privMediaStream = mediaStream;\r\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                            this.privInitializeDeferral.resolve();\r\n                        }, (error: MediaStreamError) => {\r\n                            const errorMsg = `Error occurred during microphone initialization: ${error}`;\r\n                            this.privInitializeDeferral.reject(errorMsg);\r\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                        });\r\n                }\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason: any) => {\r\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason}`);\r\n                    });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>) => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: async () => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        return this.turnOff();\r\n                    },\r\n                    id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    read: () => {\r\n                        return stream.read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public async turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        if (this.privInitializeDeferral) {\r\n            // Correctly handle when browser forces mic off before turnOn() completes\r\n            await this.privInitializeDeferral;\r\n            this.privInitializeDeferral = null;\r\n        }\r\n\r\n        await this.destroyAudioContext();\r\n\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().then((label: string) => {\r\n            return {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            };\r\n        });\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]) => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, () => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    private listen = async (audioNodeId: string): Promise<Stream<ArrayBuffer>> => {\r\n        await this.turnOn();\r\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n        this.privStreams[audioNodeId] = stream;\r\n        try {\r\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n        } catch (error) {\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error));\r\n            throw error;\r\n        }\r\n        const result: Stream<ArrayBuffer> = stream;\r\n        return result;\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext = (): void => {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n\r\n    private async destroyAudioContext(): Promise<void> {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            await this.privContext.close();\r\n            this.privContext = null;\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            await this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privSource: Blob | Buffer;\r\n\r\n    private privFilename: string;\r\n\r\n    private privHeaderEnd: number = 44;\r\n\r\n    public constructor(file: File | Buffer, filename?: string, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privSource = file;\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\r\n            this.privFilename = (file as File).name;\r\n        } else {\r\n            this.privFilename = filename || \"unknown.wav\";\r\n        }\r\n\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return Promise.resolve(this.privSource);\r\n    }\r\n\r\n    public turnOn = (): Promise<void> => {\r\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\r\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return Promise.reject(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach = async (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        const stream: Stream<ArrayBuffer> = await this.upload(audioNodeId);\r\n\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return Promise.resolve({\r\n            detach: async (): Promise<void> => {\r\n                stream.readEnded();\r\n                delete this.privStreams[audioNodeId];\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                await this.turnOff();\r\n            },\r\n            id: () => {\r\n                return audioNodeId;\r\n            },\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                return stream.read();\r\n            },\r\n        });\r\n    }\r\n\r\n    public detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff = (): Promise<void> => {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privAudioFormatPromise.then<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl) => {\r\n            return Promise.resolve({\r\n                bitspersample: result.bitsPerSample,\r\n                channelcount: result.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: \"File\",\r\n                samplerate: result.samplesPerSec,\r\n                type: type.File,\r\n            });\r\n        });\r\n    }\r\n\r\n    private readHeader(): Promise<AudioStreamFormatImpl> {\r\n        // Read the wave header.\r\n        const maxHeaderSize: number = 512;\r\n        const header: Blob | Buffer = this.privSource.slice(0, maxHeaderSize);\r\n\r\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\r\n\r\n        const processHeader = (header: ArrayBuffer): void => {\r\n            const view: DataView = new DataView(header);\r\n\r\n            const getWord = (index: number): string => {\r\n                return String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\r\n            };\r\n\r\n            // RIFF 4 bytes.\r\n            if (\"RIFF\" !== getWord(0)) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n                return;\r\n            }\r\n\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n                return;\r\n            }\r\n\r\n            const formatSize: number = view.getInt32(16, true);\r\n            const channelCount: number = view.getUint16(22, true);\r\n            const sampleRate: number = view.getUint32(24, true);\r\n            const bitsPerSample: number = view.getUint16(34, true);\r\n            // Confirm if header is 44 bytes long.\r\n            let pos: number = 36 + Math.max(formatSize - 16, 0);\r\n            for (; getWord(pos) !== \"data\"; pos += 2) {\r\n                if (pos > maxHeaderSize - 8) {\r\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\r\n                    return;\r\n                }\r\n            }\r\n            this.privHeaderEnd = pos + 8;\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\r\n        };\r\n\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\r\n            const reader: FileReader = new FileReader();\r\n\r\n            reader.onload = (event: Event) => {\r\n                const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                processHeader(header);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(header);\r\n        } else {\r\n            const h: Buffer = header as Buffer;\r\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\r\n        }\r\n        return headerResult.promise;\r\n    }\r\n\r\n    private async upload(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        const onerror = (error: string) => {\r\n            const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n            throw new Error(errorMsg);\r\n        };\r\n\r\n        try {\r\n            await this.turnOn();\r\n\r\n            const format: AudioStreamFormatImpl = await this.privAudioFormatPromise;\r\n            const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n\r\n            this.privStreams[audioNodeId] = stream;\r\n            const chunk: Blob | Buffer = this.privSource.slice(this.privHeaderEnd);\r\n\r\n            const processFile = (buff: ArrayBuffer): void => {\r\n                if (stream.isClosed) {\r\n                    return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                }\r\n\r\n                stream.writeStreamChunk({\r\n                    buffer: buff,\r\n                    isEnd: false,\r\n                    timeReceived: Date.now(),\r\n                });\r\n                stream.close();\r\n            };\r\n\r\n            if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\r\n                const reader: FileReader = new FileReader();\r\n                reader.onerror = (ev: ProgressEvent<FileReader>) => { onerror(ev.toString()); };\r\n\r\n                reader.onload = (event: Event) => {\r\n                    const fileBuffer: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                    processFile(fileBuffer);\r\n                };\r\n\r\n                reader.readAsArrayBuffer(chunk);\r\n            } else {\r\n                const c: Buffer = chunk as Buffer;\r\n                processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\r\n            }\r\n\r\n            return stream;\r\n        } catch (e) {\r\n            onerror(e);\r\n        }\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n /**\r\n  * An abstract base class that defines callback methods (read() and close()) for\r\n  * custom audio input streams).\r\n  * @class PullAudioInputStreamCallback\r\n  */\r\nexport abstract class PullAudioInputStreamCallback {\r\n\r\n    /**\r\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes\r\n     * to be read is determined by the size of dataBuffer.\r\n     * @member PullAudioInputStreamCallback.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\r\n     * @returns {number} the number of bytes have been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): number;\r\n\r\n    /**\r\n     * Closes the audio input stream.\r\n     * @member PullAudioInputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisAdapterBase } from \"../../common.speech/Exports\";\r\nimport {\r\n    BackgroundEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports\";\r\nimport { AudioFormatTag, AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\"\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.12.1\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n            this.privAudioOutputStream.read(receivedAudio).then((_: number): void => {\r\n                if (this.privFormat.hasHeader) {\r\n                    receivedAudio = SynthesisAdapterBase.addHeader(receivedAudio, this.privFormat);\r\n                }\r\n                const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                this.notifyPlayback().then(() => {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    set format(format: AudioStreamFormat) {\r\n        if (typeof (AudioContext) !== \"undefined\" || typeof ((window as any).webkitAudioContext) !== \"undefined\") {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // tslint:disable-next-line:no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}.`);\r\n\r\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (event: Event): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (_: Event) => {\r\n                        this.updateSourceBuffer().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (_: Event) => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (_: Event) => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason: string): void => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n\r\n            } else {\r\n                // tslint:disable-next-line:no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioStart: (sender: IPlayer) => void;\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private async updateSourceBuffer(): Promise<void> {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // tslint:disable-next-line:no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            await this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            await this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            await this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private async notifyPlayback(): Promise<void> {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privPlaybackStarted = true;\r\n            if (!!this.onAudioStart) {\r\n                this.onAudioStart(this);\r\n            }\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                await this.privAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * An abstract base class that defines callback methods (write() and close()) for\r\n * custom audio output streams).\r\n * @class PushAudioOutputStreamCallback\r\n */\r\nexport abstract class PushAudioOutputStreamCallback {\r\n\r\n    /**\r\n     * Writes audio data into the data buffer.\r\n     * @member PushAudioOutputStreamCallback.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array that stores the audio data to write.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the audio output stream.\r\n     * @member PushAudioOutputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport { AudioStreamFormat } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", () => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    Deferred,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     *        Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     *        stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream as PullAudioInputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder();\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player as SpeakerAudioDestination);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     *        stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream as PushAudioOutputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then(() => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.blob\r\n     * @function\r\n     * @public\r\n     */\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.privSource.blob;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Profanity option.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ProfanityOption {\r\n    Masked = 0,\r\n    Removed = 1,\r\n    Raw = 2\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport {IStringDictionary} from \"../common/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     *              SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     *              and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     *              endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     *       use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     *       expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     *       to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     *       the new token value will not apply to recognizers that have already been created. For recognizers\r\n     *       that have been created before, you need to set authorization token of the corresponding recognizer\r\n     *       to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Gets the authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Gets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * get synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Gets/Sets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * set synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public close(): void { }\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     * @return {string} The subscription key set on the config.\r\n     */\r\n    public abstract get subscriptionKey(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.region\r\n     * @function\r\n     * @public\r\n     * @return {region} The region set on the config.\r\n     */\r\n    public abstract get region(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.setProfanity\r\n     * @function\r\n     * @public\r\n     * @param {profanity} Profanity option to set.\r\n     * @summary Sets profanity option.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract setProfanity(profanity: ProfanityOption): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.enableAudioLogging\r\n     * @function\r\n     * @public\r\n     * @summary Enable audio logging in service.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract enableAudioLogging(): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\r\n     * @function\r\n     * @public\r\n     * @summary Includes word-level timestamps.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract requestWordLevelTimestamps(): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.enableDictation\r\n     * @function\r\n     * @public\r\n     * @summary Enable dictation. Only supported in speech continuous recognition.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract enableDictation(): void;\r\n\r\n    /**\r\n     * Gets the language of the speech synthesizer.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis language.\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract get speechSynthesisLanguage(): string;\r\n\r\n    /**\r\n     * Sets the language of the speech synthesizer.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract set speechSynthesisLanguage(language: string);\r\n\r\n    /**\r\n     * Gets the voice of the speech synthesizer.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis voice.\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract get speechSynthesisVoiceName(): string;\r\n\r\n    /**\r\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract set speechSynthesisVoiceName(voice: string);\r\n\r\n    /**\r\n     * Gets the speech synthesis output format.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\r\n\r\n    /**\r\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * The default format is Audio16Khz64KBitRateMonoMp3 for browser and Riff16Khz16BitMonoPcm for Node.JS\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\r\n}\r\n\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\r\n    }\r\n\r\n    public set autoDetectSourceLanguages(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return (OutputFormat as any)[this.privProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return (SpeechSynthesisOutputFormat as any)[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n"],"sourceRoot":""}